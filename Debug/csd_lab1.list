
csd_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000514c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c4  080057c4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080057cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000084  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e72  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b03  00000000  00000000  00029f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  0002ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000750  00000000  00000000  0002c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230ef  00000000  00000000  0002c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a31f  00000000  00000000  0004fa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0b51  00000000  00000000  00059d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a8c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c04  00000000  00000000  0012a918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080052e4 	.word	0x080052e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080052e4 	.word	0x080052e4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b974 	b.w	8000bcc <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468e      	mov	lr, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d14d      	bne.n	80009a6 <__udivmoddi4+0xaa>
 800090a:	428a      	cmp	r2, r1
 800090c:	4694      	mov	ip, r2
 800090e:	d969      	bls.n	80009e4 <__udivmoddi4+0xe8>
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b152      	cbz	r2, 800092c <__udivmoddi4+0x30>
 8000916:	fa01 f302 	lsl.w	r3, r1, r2
 800091a:	f1c2 0120 	rsb	r1, r2, #32
 800091e:	fa20 f101 	lsr.w	r1, r0, r1
 8000922:	fa0c fc02 	lsl.w	ip, ip, r2
 8000926:	ea41 0e03 	orr.w	lr, r1, r3
 800092a:	4094      	lsls	r4, r2
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	0c21      	lsrs	r1, r4, #16
 8000932:	fbbe f6f8 	udiv	r6, lr, r8
 8000936:	fa1f f78c 	uxth.w	r7, ip
 800093a:	fb08 e316 	mls	r3, r8, r6, lr
 800093e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000942:	fb06 f107 	mul.w	r1, r6, r7
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000952:	f080 811f 	bcs.w	8000b94 <__udivmoddi4+0x298>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 811c 	bls.w	8000b94 <__udivmoddi4+0x298>
 800095c:	3e02      	subs	r6, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f8 	udiv	r0, r3, r8
 8000968:	fb08 3310 	mls	r3, r8, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x92>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000980:	f080 810a 	bcs.w	8000b98 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8107 	bls.w	8000b98 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	1be4      	subs	r4, r4, r7
 8000994:	2600      	movs	r6, #0
 8000996:	b11d      	cbz	r5, 80009a0 <__udivmoddi4+0xa4>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c5 4300 	strd	r4, r3, [r5]
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0xc2>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	f000 80ef 	beq.w	8000b8e <__udivmoddi4+0x292>
 80009b0:	2600      	movs	r6, #0
 80009b2:	e9c5 0100 	strd	r0, r1, [r5]
 80009b6:	4630      	mov	r0, r6
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	fab3 f683 	clz	r6, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d14a      	bne.n	8000a5c <__udivmoddi4+0x160>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xd4>
 80009ca:	4282      	cmp	r2, r0
 80009cc:	f200 80f9 	bhi.w	8000bc2 <__udivmoddi4+0x2c6>
 80009d0:	1a84      	subs	r4, r0, r2
 80009d2:	eb61 0303 	sbc.w	r3, r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	469e      	mov	lr, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e0      	beq.n	80009a0 <__udivmoddi4+0xa4>
 80009de:	e9c5 4e00 	strd	r4, lr, [r5]
 80009e2:	e7dd      	b.n	80009a0 <__udivmoddi4+0xa4>
 80009e4:	b902      	cbnz	r2, 80009e8 <__udivmoddi4+0xec>
 80009e6:	deff      	udf	#255	; 0xff
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	f040 8092 	bne.w	8000b16 <__udivmoddi4+0x21a>
 80009f2:	eba1 010c 	sub.w	r1, r1, ip
 80009f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009fa:	fa1f fe8c 	uxth.w	lr, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a06:	fb07 1113 	mls	r1, r7, r3, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb0e f003 	mul.w	r0, lr, r3
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x12c>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x12a>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f200 80cb 	bhi.w	8000bbc <__udivmoddi4+0x2c0>
 8000a26:	4643      	mov	r3, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1110 	mls	r1, r7, r0, r1
 8000a34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a38:	fb0e fe00 	mul.w	lr, lr, r0
 8000a3c:	45a6      	cmp	lr, r4
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x156>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a48:	d202      	bcs.n	8000a50 <__udivmoddi4+0x154>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f200 80bb 	bhi.w	8000bc6 <__udivmoddi4+0x2ca>
 8000a50:	4608      	mov	r0, r1
 8000a52:	eba4 040e 	sub.w	r4, r4, lr
 8000a56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a5a:	e79c      	b.n	8000996 <__udivmoddi4+0x9a>
 8000a5c:	f1c6 0720 	rsb	r7, r6, #32
 8000a60:	40b3      	lsls	r3, r6
 8000a62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a72:	431c      	orrs	r4, r3
 8000a74:	40f9      	lsrs	r1, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a82:	0c20      	lsrs	r0, r4, #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fb09 1118 	mls	r1, r9, r8, r1
 8000a8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	4288      	cmp	r0, r1
 8000a96:	fa02 f206 	lsl.w	r2, r2, r6
 8000a9a:	d90b      	bls.n	8000ab4 <__udivmoddi4+0x1b8>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aa4:	f080 8088 	bcs.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f240 8085 	bls.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aae:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab2:	4461      	add	r1, ip
 8000ab4:	1a09      	subs	r1, r1, r0
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000abc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ac0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ac4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac8:	458e      	cmp	lr, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x1e2>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad4:	d26c      	bcs.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ad6:	458e      	cmp	lr, r1
 8000ad8:	d96a      	bls.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ada:	3802      	subs	r0, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae6:	eba1 010e 	sub.w	r1, r1, lr
 8000aea:	42a1      	cmp	r1, r4
 8000aec:	46c8      	mov	r8, r9
 8000aee:	46a6      	mov	lr, r4
 8000af0:	d356      	bcc.n	8000ba0 <__udivmoddi4+0x2a4>
 8000af2:	d053      	beq.n	8000b9c <__udivmoddi4+0x2a0>
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x212>
 8000af6:	ebb3 0208 	subs.w	r2, r3, r8
 8000afa:	eb61 010e 	sbc.w	r1, r1, lr
 8000afe:	fa01 f707 	lsl.w	r7, r1, r7
 8000b02:	fa22 f306 	lsr.w	r3, r2, r6
 8000b06:	40f1      	lsrs	r1, r6
 8000b08:	431f      	orrs	r7, r3
 8000b0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b0e:	2600      	movs	r6, #0
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	40d8      	lsrs	r0, r3
 8000b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b20:	fa21 f303 	lsr.w	r3, r1, r3
 8000b24:	4091      	lsls	r1, r2
 8000b26:	4301      	orrs	r1, r0
 8000b28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b34:	fb07 3610 	mls	r6, r7, r0, r3
 8000b38:	0c0b      	lsrs	r3, r1, #16
 8000b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b42:	429e      	cmp	r6, r3
 8000b44:	fa04 f402 	lsl.w	r4, r4, r2
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x260>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b52:	d22f      	bcs.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d92d      	bls.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	b289      	uxth	r1, r1
 8000b60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b64:	fb07 3316 	mls	r3, r7, r6, r3
 8000b68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x28a>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b7c:	d216      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d914      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b82:	3e02      	subs	r6, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b8c:	e738      	b.n	8000a00 <__udivmoddi4+0x104>
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e705      	b.n	80009a0 <__udivmoddi4+0xa4>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e3      	b.n	8000960 <__udivmoddi4+0x64>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6f8      	b.n	800098e <__udivmoddi4+0x92>
 8000b9c:	454b      	cmp	r3, r9
 8000b9e:	d2a9      	bcs.n	8000af4 <__udivmoddi4+0x1f8>
 8000ba0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7a3      	b.n	8000af4 <__udivmoddi4+0x1f8>
 8000bac:	4646      	mov	r6, r8
 8000bae:	e7ea      	b.n	8000b86 <__udivmoddi4+0x28a>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	e794      	b.n	8000ade <__udivmoddi4+0x1e2>
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	e7d1      	b.n	8000b5c <__udivmoddi4+0x260>
 8000bb8:	46d0      	mov	r8, sl
 8000bba:	e77b      	b.n	8000ab4 <__udivmoddi4+0x1b8>
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	4461      	add	r1, ip
 8000bc0:	e732      	b.n	8000a28 <__udivmoddi4+0x12c>
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	e709      	b.n	80009da <__udivmoddi4+0xde>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e742      	b.n	8000a52 <__udivmoddi4+0x156>

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_GPIO_Init+0xd4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <MX_GPIO_Init+0xd8>)
 8000c5e:	f001 fb25 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_GPIO_Init+0xdc>)
 8000c78:	f001 f954 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_GPIO_Init+0xd8>)
 8000c96:	f001 f945 	bl	8001f24 <HAL_GPIO_Init>

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	40020800 	.word	0x40020800

08000cb0 <BufferConstructor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

Buffer BufferConstructor(int length) {
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	Buffer buffer;
	buffer.length = length;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	733b      	strb	r3, [r7, #12]
	buffer.values = (char*) malloc(length * sizeof(char));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 f848 	bl	8003d58 <malloc>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	613b      	str	r3, [r7, #16]
	buffer.symbol = buffer.values;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	617b      	str	r3, [r7, #20]

	return buffer;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	461c      	mov	r4, r3
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}

08000ce8 <CombinationConstructor>:

Combination CombinationConstructor(int length, uint32_t *lamp,
		uint32_t *defaultTime) {
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	603b      	str	r3, [r7, #0]
	Combination comb;
	comb.length = length;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	613b      	str	r3, [r7, #16]
	comb.currentPhase = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
	comb.lamp = (uint32_t*) malloc(length * sizeof(uint32_t));
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 f828 	bl	8003d58 <malloc>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	61bb      	str	r3, [r7, #24]
	comb.defaultTime = (uint32_t*) malloc(length * sizeof(uint32_t));
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 f821 	bl	8003d58 <malloc>
 8000d16:	4603      	mov	r3, r0
 8000d18:	61fb      	str	r3, [r7, #28]
	comb.leftTime = (uint32_t*) malloc(length * sizeof(uint32_t));
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 f81a 	bl	8003d58 <malloc>
 8000d24:	4603      	mov	r3, r0
 8000d26:	623b      	str	r3, [r7, #32]

	// Copy values to allocated memory
	for (int i = 0; i < length; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2c:	e020      	b.n	8000d70 <CombinationConstructor+0x88>
		comb.lamp[i] = lamp[i];
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	441a      	add	r2, r3
 8000d36:	69b9      	ldr	r1, [r7, #24]
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	6812      	ldr	r2, [r2, #0]
 8000d40:	601a      	str	r2, [r3, #0]
		comb.defaultTime[i] = defaultTime[i];
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	441a      	add	r2, r3
 8000d4a:	69f9      	ldr	r1, [r7, #28]
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	601a      	str	r2, [r3, #0]
		comb.leftTime[i] = defaultTime[i];
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	6a39      	ldr	r1, [r7, #32]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbda      	blt.n	8000d2e <CombinationConstructor+0x46>
	}

	return comb;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	461d      	mov	r5, r3
 8000d7c:	f107 0410 	add.w	r4, r7, #16
 8000d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	602b      	str	r3, [r5, #0]
}
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bdb0      	pop	{r4, r5, r7, pc}

08000d90 <CombListGenerator>:

Combination* CombListGenerator(int numCombinations) {
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b0a4      	sub	sp, #144	; 0x90
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	61f8      	str	r0, [r7, #28]
	Combination *combinationList = (Combination*) malloc(
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 ffd8 	bl	8003d58 <malloc>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			numCombinations * sizeof(Combination));

	// Combination 0
	uint32_t lamps0[] = { GREEN_LIGHT, YELLOW_LIGHT, RED_LIGHT };
 8000dae:	4b70      	ldr	r3, [pc, #448]	; (8000f70 <CombListGenerator+0x1e0>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000db6:	4b6f      	ldr	r3, [pc, #444]	; (8000f74 <CombListGenerator+0x1e4>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000dbe:	4b6e      	ldr	r3, [pc, #440]	; (8000f78 <CombListGenerator+0x1e8>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint32_t defaultTime0[] = { 1 * second, 1 * second, 1 * second };
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	677b      	str	r3, [r7, #116]	; 0x74
 8000dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
	combinationList[0] = CombinationConstructor(3, lamps0, defaultTime0);
 8000dd8:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8000ddc:	4638      	mov	r0, r7
 8000dde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000de2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000de6:	2103      	movs	r1, #3
 8000de8:	f7ff ff7e 	bl	8000ce8 <CombinationConstructor>
 8000dec:	4625      	mov	r5, r4
 8000dee:	463c      	mov	r4, r7
 8000df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	602b      	str	r3, [r5, #0]

	// Combination 1
	uint32_t lamps1[] = { RED_LIGHT, YELLOW_LIGHT };
 8000df8:	4b5f      	ldr	r3, [pc, #380]	; (8000f78 <CombListGenerator+0x1e8>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	; (8000f74 <CombListGenerator+0x1e4>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t defaultTime1[] = { 1 * second, 1 * second };
 8000e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e08:	667b      	str	r3, [r7, #100]	; 0x64
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	66bb      	str	r3, [r7, #104]	; 0x68
	combinationList[1] = CombinationConstructor(2, lamps1, defaultTime1);
 8000e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e14:	f103 0414 	add.w	r4, r3, #20
 8000e18:	4638      	mov	r0, r7
 8000e1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e1e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000e22:	2102      	movs	r1, #2
 8000e24:	f7ff ff60 	bl	8000ce8 <CombinationConstructor>
 8000e28:	4625      	mov	r5, r4
 8000e2a:	463c      	mov	r4, r7
 8000e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	602b      	str	r3, [r5, #0]

	// Combination 2
	uint32_t lamps2[] = { GREEN_LIGHT, RED_LIGHT };
 8000e34:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <CombListGenerator+0x1e0>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e3a:	4b4f      	ldr	r3, [pc, #316]	; (8000f78 <CombListGenerator+0x1e8>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t defaultTime2[] = { 1 * second, 1 * second };
 8000e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e44:	657b      	str	r3, [r7, #84]	; 0x54
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	65bb      	str	r3, [r7, #88]	; 0x58
	combinationList[2] = CombinationConstructor(2, lamps2, defaultTime2);
 8000e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e50:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000e54:	4638      	mov	r0, r7
 8000e56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e5a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000e5e:	2102      	movs	r1, #2
 8000e60:	f7ff ff42 	bl	8000ce8 <CombinationConstructor>
 8000e64:	4625      	mov	r5, r4
 8000e66:	463c      	mov	r4, r7
 8000e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	602b      	str	r3, [r5, #0]

	// Combination 3
	uint32_t lamps3[] = { RED_LIGHT, YELLOW_LIGHT, GREEN_LIGHT };
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <CombListGenerator+0x1e8>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e76:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <CombListGenerator+0x1e4>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e7c:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <CombListGenerator+0x1e0>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t defaultTime3[] = { 1 * second, 1 * second, 1* second };
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
	combinationList[3] = CombinationConstructor(3, lamps3, defaultTime3);
 8000e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e98:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ea2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	f7ff ff1e 	bl	8000ce8 <CombinationConstructor>
 8000eac:	4625      	mov	r5, r4
 8000eae:	463c      	mov	r4, r7
 8000eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	602b      	str	r3, [r5, #0]

	// Combination 4
	uint32_t lamps4[] = { GREEN_LIGHT, YELLOW_LIGHT, GREEN_LIGHT };
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <CombListGenerator+0x1e0>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <CombListGenerator+0x1e4>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <CombListGenerator+0x1e0>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t defaultTime4[] = { 0.2 * second, 0.2 * second, 0.2 * second };
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc62 	bl	8000798 <__aeabi_ui2d>
 8000ed4:	a324      	add	r3, pc, #144	; (adr r3, 8000f68 <CombListGenerator+0x1d8>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff f9f1 	bl	80002c0 <__aeabi_dmul>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fcd1 	bl	800088c <__aeabi_d2uiz>
 8000eea:	4603      	mov	r3, r0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fc50 	bl	8000798 <__aeabi_ui2d>
 8000ef8:	a31b      	add	r3, pc, #108	; (adr r3, 8000f68 <CombListGenerator+0x1d8>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f7ff f9df 	bl	80002c0 <__aeabi_dmul>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fcbf 	bl	800088c <__aeabi_d2uiz>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fc3e 	bl	8000798 <__aeabi_ui2d>
 8000f1c:	a312      	add	r3, pc, #72	; (adr r3, 8000f68 <CombListGenerator+0x1d8>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff f9cd 	bl	80002c0 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff fcad 	bl	800088c <__aeabi_d2uiz>
 8000f32:	4603      	mov	r3, r0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
	combinationList[4] = CombinationConstructor(3, lamps4, defaultTime4);
 8000f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f3a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000f3e:	4638      	mov	r0, r7
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f48:	2103      	movs	r1, #3
 8000f4a:	f7ff fecd 	bl	8000ce8 <CombinationConstructor>
 8000f4e:	4625      	mov	r5, r4
 8000f50:	463c      	mov	r4, r7
 8000f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	602b      	str	r3, [r5, #0]

	// Add more combinations as needed

	return combinationList;
 8000f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3790      	adds	r7, #144	; 0x90
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	9999999a 	.word	0x9999999a
 8000f6c:	3fc99999 	.word	0x3fc99999
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000002 	.word	0x20000002
 8000f78:	20000004 	.word	0x20000004

08000f7c <wait>:

void wait(uint32_t duration) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uint32_t begin = HAL_GetTick();
 8000f84:	f000 fe1e 	bl	8001bc4 <HAL_GetTick>
 8000f88:	60f8      	str	r0, [r7, #12]
	while ((HAL_GetTick() - begin) < duration) {
 8000f8a:	bf00      	nop
 8000f8c:	f000 fe1a 	bl	8001bc4 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <wait+0x10>

	}
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <turnLightOff>:

void turnLightOff(uint16_t light_type) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, light_type, GPIO_PIN_RESET);
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <turnLightOff+0x20>)
 8000fba:	f001 f977 	bl	80022ac <HAL_GPIO_WritePin>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020c00 	.word	0x40020c00

08000fcc <turnLightOn>:

void turnLightOn(uint16_t light_type) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, light_type, GPIO_PIN_SET);
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <turnLightOn+0x20>)
 8000fde:	f001 f965 	bl	80022ac <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <completePhase>:

//Выполняет фазу. Если пользователь нажимает кнопку -- меняет комбинацию
uint16_t completePhase(Combination *comb, uint16_t blink_mode) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
	uint16_t result_blink_mode = blink_mode;
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	82fb      	strh	r3, [r7, #22]

	int currentPhase = comb->currentPhase;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	60fb      	str	r3, [r7, #12]
	turnLightOn(comb->lamp[currentPhase]);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffd9 	bl	8000fcc <turnLightOn>
	startTime = HAL_GetTick();
 800101a:	f000 fdd3 	bl	8001bc4 <HAL_GetTick>
 800101e:	4603      	mov	r3, r0
 8001020:	4a38      	ldr	r2, [pc, #224]	; (8001104 <completePhase+0x114>)
 8001022:	6013      	str	r3, [r2, #0]
	uint32_t duration;
	int pressedButton = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]

	while ((duration = HAL_GetTick() - startTime) < comb->leftTime[currentPhase]) {
 8001028:	e030      	b.n	800108c <completePhase+0x9c>
		if (HAL_GPIO_ReadPin(GPIOC, BUTTON) == 0) {
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <completePhase+0x118>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	4836      	ldr	r0, [pc, #216]	; (800110c <completePhase+0x11c>)
 8001032:	f001 f923 	bl	800227c <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d127      	bne.n	800108c <completePhase+0x9c>
			comb->leftTime[currentPhase] -= duration;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	1a8a      	subs	r2, r1, r2
 8001056:	601a      	str	r2, [r3, #0]
			result_blink_mode++; // Если кнопка нажата то меняем комбинацию
 8001058:	8afb      	ldrh	r3, [r7, #22]
 800105a:	3301      	adds	r3, #1
 800105c:	82fb      	strh	r3, [r7, #22]
			wait(second * 0.5);
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fb98 	bl	8000798 <__aeabi_ui2d>
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <completePhase+0x120>)
 800106e:	f7ff f927 	bl	80002c0 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fc07 	bl	800088c <__aeabi_d2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff7b 	bl	8000f7c <wait>
			pressedButton = 1;
 8001086:	2301      	movs	r3, #1
 8001088:	613b      	str	r3, [r7, #16]
			break;
 800108a:	e00f      	b.n	80010ac <completePhase+0xbc>
	while ((duration = HAL_GetTick() - startTime) < comb->leftTime[currentPhase]) {
 800108c:	f000 fd9a 	bl	8001bc4 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <completePhase+0x114>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d3be      	bcc.n	800102a <completePhase+0x3a>
		}
	}

	if (pressedButton == 0) {
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d119      	bne.n	80010e6 <completePhase+0xf6>
		comb->leftTime[currentPhase] = comb->defaultTime[currentPhase];
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	441a      	add	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6919      	ldr	r1, [r3, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	601a      	str	r2, [r3, #0]
		comb->currentPhase += 1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	605a      	str	r2, [r3, #4]
		if (comb->currentPhase == comb->length) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d102      	bne.n	80010e6 <completePhase+0xf6>
			comb->currentPhase = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
		}
	}

	turnLightOff(comb->lamp[currentPhase]);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff57 	bl	8000fa8 <turnLightOff>
	return result_blink_mode;
 80010fa:	8afb      	ldrh	r3, [r7, #22]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000098 	.word	0x20000098
 8001108:	20000006 	.word	0x20000006
 800110c:	40020800 	.word	0x40020800
 8001110:	3fe00000 	.word	0x3fe00000

08001114 <user_print>:


void user_print(char *mes) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	int debugSize = strlen(mes);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff f871 	bl	8000204 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart6, (uint8_t*) mes, debugSize, 3000);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	b29a      	uxth	r2, r3
 800112a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <user_print+0x2c>)
 8001132:	f001 fd7a 	bl	8002c2a <HAL_UART_Transmit>
	return;
 8001136:	bf00      	nop
}
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000a8 	.word	0x200000a8

08001144 <proceedCommand>:

void proceedCommand(char *command) {
 8001144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001148:	b0b3      	sub	sp, #204	; 0xcc
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]


	//Начало обработки комманды создания новой комбинации
	if (strcmp(strtok(command, " "), "new") == 0) {
 800114e:	49ce      	ldr	r1, [pc, #824]	; (8001488 <proceedCommand+0x344>)
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f002 ff2f 	bl	8003fb4 <strtok>
 8001156:	4603      	mov	r3, r0
 8001158:	49cc      	ldr	r1, [pc, #816]	; (800148c <proceedCommand+0x348>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f848 	bl	80001f0 <strcmp>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 8161 	bne.w	800142a <proceedCommand+0x2e6>
 8001168:	466b      	mov	r3, sp
 800116a:	461e      	mov	r6, r3

		char *light = strtok(NULL, " ");
 800116c:	49c6      	ldr	r1, [pc, #792]	; (8001488 <proceedCommand+0x344>)
 800116e:	2000      	movs	r0, #0
 8001170:	f002 ff20 	bl	8003fb4 <strtok>
 8001174:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		int combLen = strlen(light);
 8001178:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800117c:	f7ff f842 	bl	8000204 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		if (!(2 <= strlen(light) && strlen(light) <= 8)) {
 8001186:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800118a:	f7ff f83b 	bl	8000204 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	2b01      	cmp	r3, #1
 8001192:	d906      	bls.n	80011a2 <proceedCommand+0x5e>
 8001194:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001198:	f7ff f834 	bl	8000204 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d903      	bls.n	80011aa <proceedCommand+0x66>
			user_print("Количество ламп в комбинации должно быть от 2 до 8\n");
 80011a2:	48bb      	ldr	r0, [pc, #748]	; (8001490 <proceedCommand+0x34c>)
 80011a4:	f7ff ffb6 	bl	8001114 <user_print>
			return;
 80011a8:	e13d      	b.n	8001426 <proceedCommand+0x2e2>
		}


		uint32_t lamp[combLen];
 80011aa:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80011ae:	1e4b      	subs	r3, r1, #1
 80011b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80011b4:	460a      	mov	r2, r1
 80011b6:	2300      	movs	r3, #0
 80011b8:	603a      	str	r2, [r7, #0]
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	0143      	lsls	r3, r0, #5
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	0142      	lsls	r2, r0, #5
 80011d2:	460a      	mov	r2, r1
 80011d4:	2300      	movs	r3, #0
 80011d6:	4692      	mov	sl, r2
 80011d8:	469b      	mov	fp, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80011e6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80011ea:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80011ee:	460b      	mov	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	3307      	adds	r3, #7
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	ebad 0d03 	sub.w	sp, sp, r3
 80011fc:	466b      	mov	r3, sp
 80011fe:	3303      	adds	r3, #3
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		int i = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		while (light[i] != NULL) {
 800120e:	e04e      	b.n	80012ae <proceedCommand+0x16a>
			if (light[i] == 'g') {
 8001210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001214:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b67      	cmp	r3, #103	; 0x67
 800121e:	d109      	bne.n	8001234 <proceedCommand+0xf0>
				lamp[i] = GREEN_LIGHT;
 8001220:	4b9c      	ldr	r3, [pc, #624]	; (8001494 <proceedCommand+0x350>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800122a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800122e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001232:	e037      	b.n	80012a4 <proceedCommand+0x160>
			} else if (light[i] == 'y') {
 8001234:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001238:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b79      	cmp	r3, #121	; 0x79
 8001242:	d109      	bne.n	8001258 <proceedCommand+0x114>
				lamp[i] = YELLOW_LIGHT;
 8001244:	4b94      	ldr	r3, [pc, #592]	; (8001498 <proceedCommand+0x354>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800124e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001256:	e025      	b.n	80012a4 <proceedCommand+0x160>
			} else if (light[i] == 'r') {
 8001258:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800125c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b72      	cmp	r3, #114	; 0x72
 8001266:	d109      	bne.n	800127c <proceedCommand+0x138>
				lamp[i] = RED_LIGHT;
 8001268:	4b8c      	ldr	r3, [pc, #560]	; (800149c <proceedCommand+0x358>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001272:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800127a:	e013      	b.n	80012a4 <proceedCommand+0x160>
			} else if (light[i] == 'n') {
 800127c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001280:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001284:	4413      	add	r3, r2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b6e      	cmp	r3, #110	; 0x6e
 800128a:	d107      	bne.n	800129c <proceedCommand+0x158>
				lamp[i] = 0;
 800128c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001294:	2100      	movs	r1, #0
 8001296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800129a:	e003      	b.n	80012a4 <proceedCommand+0x160>
			} else {
				user_print("Доступны только следующие символы g, r, y, n \n");
 800129c:	4880      	ldr	r0, [pc, #512]	; (80014a0 <proceedCommand+0x35c>)
 800129e:	f7ff ff39 	bl	8001114 <user_print>
				return;
 80012a2:	e0c0      	b.n	8001426 <proceedCommand+0x2e2>
			}
			i++;
 80012a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012a8:	3301      	adds	r3, #1
 80012aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		while (light[i] != NULL) {
 80012ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1a8      	bne.n	8001210 <proceedCommand+0xcc>
		}



		user_print("Введите пожалуйста продолжительности для комбинаций\n");
 80012be:	4879      	ldr	r0, [pc, #484]	; (80014a4 <proceedCommand+0x360>)
 80012c0:	f7ff ff28 	bl	8001114 <user_print>
		char mes[100];
		uint32_t defaultTime[combLen]; //Дефолтная продолжительность ламп
 80012c4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80012c8:	466b      	mov	r3, sp
 80012ca:	469a      	mov	sl, r3
 80012cc:	1e4b      	subs	r3, r1, #1
 80012ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80012d2:	460a      	mov	r2, r1
 80012d4:	2300      	movs	r3, #0
 80012d6:	4690      	mov	r8, r2
 80012d8:	4699      	mov	r9, r3
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80012e6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80012ea:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80012ee:	460a      	mov	r2, r1
 80012f0:	2300      	movs	r3, #0
 80012f2:	4614      	mov	r4, r2
 80012f4:	461d      	mov	r5, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	016b      	lsls	r3, r5, #5
 8001300:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001304:	0162      	lsls	r2, r4, #5
 8001306:	460b      	mov	r3, r1
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	3307      	adds	r3, #7
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	ebad 0d03 	sub.w	sp, sp, r3
 8001314:	466b      	mov	r3, sp
 8001316:	3303      	adds	r3, #3
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		for (int i = 0; i < combLen; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001326:	e04f      	b.n	80013c8 <proceedCommand+0x284>
			sprintf(mes, "\nПродолжительность для комбинации №%d\n", i);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001330:	495d      	ldr	r1, [pc, #372]	; (80014a8 <proceedCommand+0x364>)
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fe1e 	bl	8003f74 <siprintf>
			user_print(mes);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fee9 	bl	8001114 <user_print>
			uint32_t number_i;
			char timeForComb[10];
			char *currentTimePosition = timeForComb;
 8001342:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001346:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

			while (1) {
				if (HAL_UART_Receive(&huart6, (uint8_t*) currentTimePosition, 1, 100) == HAL_OK) {
 800134a:	2364      	movs	r3, #100	; 0x64
 800134c:	2201      	movs	r2, #1
 800134e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001352:	4856      	ldr	r0, [pc, #344]	; (80014ac <proceedCommand+0x368>)
 8001354:	f001 fcfb 	bl	8002d4e <HAL_UART_Receive>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f5      	bne.n	800134a <proceedCommand+0x206>
					if (*currentTimePosition == '\r') {
 800135e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b0d      	cmp	r3, #13
 8001366:	d113      	bne.n	8001390 <proceedCommand+0x24c>
						*currentTimePosition = '\0';
 8001368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
						number_i = atoi(timeForComb);
 8001370:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fcc1 	bl	8003cfc <atoi>
 800137a:	4603      	mov	r3, r0
 800137c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						if (number_i == 0) {
 8001380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001384:	2b00      	cmp	r3, #0
 8001386:	d111      	bne.n	80013ac <proceedCommand+0x268>
							user_print("Вы должны ввести число больше 0");
 8001388:	4849      	ldr	r0, [pc, #292]	; (80014b0 <proceedCommand+0x36c>)
 800138a:	f7ff fec3 	bl	8001114 <user_print>
 800138e:	e049      	b.n	8001424 <proceedCommand+0x2e0>
							return;
						}
						break; //Пользователь правильно ввёл число, которое нам было нужно
					}
					HAL_UART_Transmit(&huart6, (uint8_t*) currentTimePosition, 1, 3000);
 8001390:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001394:	2201      	movs	r2, #1
 8001396:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800139a:	4844      	ldr	r0, [pc, #272]	; (80014ac <proceedCommand+0x368>)
 800139c:	f001 fc45 	bl	8002c2a <HAL_UART_Transmit>
					currentTimePosition++;
 80013a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013a4:	3301      	adds	r3, #1
 80013a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
				if (HAL_UART_Receive(&huart6, (uint8_t*) currentTimePosition, 1, 100) == HAL_OK) {
 80013aa:	e7ce      	b.n	800134a <proceedCommand+0x206>
						break; //Пользователь правильно ввёл число, которое нам было нужно
 80013ac:	bf00      	nop
				}
			}
			defaultTime[i] = number_i;
 80013ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80013b6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 0; i < combLen; i++) {
 80013be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013c2:	3301      	adds	r3, #1
 80013c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80013cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dba9      	blt.n	8001328 <proceedCommand+0x1e4>
		}


		Combination combination = CombinationConstructor(combLen, lamp, defaultTime);
 80013d4:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80013d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80013e0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80013e4:	f7ff fc80 	bl	8000ce8 <CombinationConstructor>
		combList[maxCombIndex] = combination;
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <proceedCommand+0x370>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <proceedCommand+0x374>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	460b      	mov	r3, r1
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	461d      	mov	r5, r3
 80013fe:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	602b      	str	r3, [r5, #0]
		maxCombIndex++;
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <proceedCommand+0x374>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <proceedCommand+0x374>)
 8001412:	6013      	str	r3, [r2, #0]
		if (maxCombIndex == 8) {
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <proceedCommand+0x374>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b08      	cmp	r3, #8
 800141a:	d102      	bne.n	8001422 <proceedCommand+0x2de>
			maxCombIndex = 4;
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <proceedCommand+0x374>)
 800141e:	2204      	movs	r2, #4
 8001420:	601a      	str	r2, [r3, #0]
		}
		return;
 8001422:	bf00      	nop
 8001424:	46d5      	mov	sp, sl
 8001426:	46b5      	mov	sp, r6
 8001428:	e029      	b.n	800147e <proceedCommand+0x33a>
	}
	//Конец обработки комманды создания новой комбинации


	//Начало обработки комманды -- сделать активной комбинацию
	if (strcmp(strtok(command, " "), "set") == 0) {
 800142a:	4917      	ldr	r1, [pc, #92]	; (8001488 <proceedCommand+0x344>)
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f002 fdc1 	bl	8003fb4 <strtok>
 8001432:	4603      	mov	r3, r0
 8001434:	4921      	ldr	r1, [pc, #132]	; (80014bc <proceedCommand+0x378>)
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe feda 	bl	80001f0 <strcmp>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11c      	bne.n	800147c <proceedCommand+0x338>
		char *comb_num_as_str = strtok(NULL, " ");
 8001442:	4911      	ldr	r1, [pc, #68]	; (8001488 <proceedCommand+0x344>)
 8001444:	2000      	movs	r0, #0
 8001446:	f002 fdb5 	bl	8003fb4 <strtok>
 800144a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

		int comb_num = atoi(comb_num_as_str);
 800144e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001452:	f002 fc53 	bl	8003cfc <atoi>
 8001456:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!(5 <= comb_num && comb_num <= 8)) {
 800145a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800145e:	2b04      	cmp	r3, #4
 8001460:	dd03      	ble.n	800146a <proceedCommand+0x326>
 8001462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001466:	2b08      	cmp	r3, #8
 8001468:	dd03      	ble.n	8001472 <proceedCommand+0x32e>
			user_print("Вы должны ввести число в диапазоне [5,8]");
 800146a:	4815      	ldr	r0, [pc, #84]	; (80014c0 <proceedCommand+0x37c>)
 800146c:	f7ff fe52 	bl	8001114 <user_print>
			return;
 8001470:	e005      	b.n	800147e <proceedCommand+0x33a>
		}
		blink_mode = comb_num;
 8001472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <proceedCommand+0x380>)
 800147a:	801a      	strh	r2, [r3, #0]
	}
	return;
 800147c:	bf00      	nop
	//Конец обработки комманды -- сделать активной комбинацию

}
 800147e:	37cc      	adds	r7, #204	; 0xcc
 8001480:	46bd      	mov	sp, r7
 8001482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001486:	bf00      	nop
 8001488:	080052fc 	.word	0x080052fc
 800148c:	08005300 	.word	0x08005300
 8001490:	08005304 	.word	0x08005304
 8001494:	20000000 	.word	0x20000000
 8001498:	20000002 	.word	0x20000002
 800149c:	20000004 	.word	0x20000004
 80014a0:	08005360 	.word	0x08005360
 80014a4:	080053b0 	.word	0x080053b0
 80014a8:	08005414 	.word	0x08005414
 80014ac:	200000a8 	.word	0x200000a8
 80014b0:	0800545c 	.word	0x0800545c
 80014b4:	200000a0 	.word	0x200000a0
 80014b8:	20000008 	.word	0x20000008
 80014bc:	08005498 	.word	0x08005498
 80014c0:	0800549c 	.word	0x0800549c
 80014c4:	2000009c 	.word	0x2000009c

080014c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014cc:	b0a9      	sub	sp, #164	; 0xa4
 80014ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014d0:	f000 fb12 	bl	8001af8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014d4:	f000 f8d2 	bl	800167c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014d8:	f7ff fb7a 	bl	8000bd0 <MX_GPIO_Init>
	MX_USART6_UART_Init();
 80014dc:	f000 fa68 	bl	80019b0 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	//Combination* combList -- список комбинаций
	combList = CombListGenerator(8);
 80014e0:	2008      	movs	r0, #8
 80014e2:	f7ff fc55 	bl	8000d90 <CombListGenerator>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <main+0x1a0>)
 80014ea:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	Buffer input_buffer = BufferConstructor(100);
 80014ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014f0:	2164      	movs	r1, #100	; 0x64
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fbdc 	bl	8000cb0 <BufferConstructor>
	char overFlowMessage[] =
 80014f8:	4a5c      	ldr	r2, [pc, #368]	; (800166c <main+0x1a4>)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4611      	mov	r1, r2
 80014fe:	2276      	movs	r2, #118	; 0x76
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fc31 	bl	8003d68 <memcpy>
			"\nВы видите данное сообщение если произошло переполнение буфера\n";

	while (1) {
		if (HAL_UART_Receive(&huart6, (uint8_t*) input_buffer.symbol, 1, 100)
 8001506:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800150a:	2364      	movs	r3, #100	; 0x64
 800150c:	2201      	movs	r2, #1
 800150e:	4858      	ldr	r0, [pc, #352]	; (8001670 <main+0x1a8>)
 8001510:	f001 fc1d 	bl	8002d4e <HAL_UART_Receive>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 8083 	bne.w	8001622 <main+0x15a>
				== HAL_OK) {
			//Дальнейший код нужно будет каким-то образом переписать
			HAL_UART_Transmit(&huart6, (uint8_t*) input_buffer.symbol, 1, 100);
 800151c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	2201      	movs	r2, #1
 8001524:	4852      	ldr	r0, [pc, #328]	; (8001670 <main+0x1a8>)
 8001526:	f001 fb80 	bl	8002c2a <HAL_UART_Transmit>
			char letter = *input_buffer.symbol;
 800152a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

			if (*input_buffer.symbol == '\r') {
 8001534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b0d      	cmp	r3, #13
 800153c:	d158      	bne.n	80015f0 <main+0x128>
 800153e:	466b      	mov	r3, sp
 8001540:	461e      	mov	r6, r3
				char command[input_buffer.symbol - input_buffer.values];
 8001542:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800154a:	1ad1      	subs	r1, r2, r3
 800154c:	1e4b      	subs	r3, r1, #1
 800154e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001552:	460a      	mov	r2, r1
 8001554:	2300      	movs	r3, #0
 8001556:	4614      	mov	r4, r2
 8001558:	461d      	mov	r5, r3
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	00eb      	lsls	r3, r5, #3
 8001564:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001568:	00e2      	lsls	r2, r4, #3
 800156a:	460a      	mov	r2, r1
 800156c:	2300      	movs	r3, #0
 800156e:	4690      	mov	r8, r2
 8001570:	4699      	mov	r9, r3
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800157e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001586:	460b      	mov	r3, r1
 8001588:	3307      	adds	r3, #7
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	ebad 0d03 	sub.w	sp, sp, r3
 8001592:	466b      	mov	r3, sp
 8001594:	3300      	adds	r3, #0
 8001596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				int i = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

				while (1) {
					char command_sym = input_buffer.values[i];
 80015a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80015a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (command_sym == '\r') {
 80015b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80015b4:	2b0d      	cmp	r3, #13
 80015b6:	d10d      	bne.n	80015d4 <main+0x10c>
						command[i] = '\0';
 80015b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80015bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015c0:	4413      	add	r3, r2
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
						break;
 80015c6:	bf00      	nop
					}
					command[i] = command_sym;
					i++;
				}

				proceedCommand(command);
 80015c8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80015cc:	f7ff fdba 	bl	8001144 <proceedCommand>
 80015d0:	46b5      	mov	sp, r6
 80015d2:	e00d      	b.n	80015f0 <main+0x128>
					command[i] = command_sym;
 80015d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80015d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015dc:	4413      	add	r3, r2
 80015de:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80015e2:	701a      	strb	r2, [r3, #0]
					i++;
 80015e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015e8:	3301      	adds	r3, #1
 80015ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while (1) {
 80015ee:	e7d7      	b.n	80015a0 <main+0xd8>
			}

			input_buffer.symbol++;
 80015f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015f4:	3301      	adds	r3, #1
 80015f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (input_buffer.symbol
 80015fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
					>= input_buffer.values + input_buffer.length) {
 80015fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001602:	f897 107c 	ldrb.w	r1, [r7, #124]	; 0x7c
 8001606:	440b      	add	r3, r1
			if (input_buffer.symbol
 8001608:	429a      	cmp	r2, r3
 800160a:	d30a      	bcc.n	8001622 <main+0x15a>
				HAL_UART_Transmit(&huart6, (uint8_t*) overFlowMessage,
 800160c:	1d39      	adds	r1, r7, #4
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	2276      	movs	r2, #118	; 0x76
 8001614:	4816      	ldr	r0, [pc, #88]	; (8001670 <main+0x1a8>)
 8001616:	f001 fb08 	bl	8002c2a <HAL_UART_Transmit>
						sizeof(overFlowMessage), 1000);
				input_buffer.symbol = input_buffer.values;
 800161a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800161e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}

		}


		 if (blink_mode == maxCombIndex) blink_mode = 0;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <main+0x1ac>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <main+0x1b0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d102      	bne.n	8001636 <main+0x16e>
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <main+0x1ac>)
 8001632:	2200      	movs	r2, #0
 8001634:	801a      	strh	r2, [r3, #0]
		 Combination* comb = &combList[blink_mode];
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <main+0x1a0>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <main+0x1ac>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	460b      	mov	r3, r1
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		 blink_mode = completePhase(comb, blink_mode);
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <main+0x1ac>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001658:	f7ff fcca 	bl	8000ff0 <completePhase>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <main+0x1ac>)
 8001662:	801a      	strh	r2, [r3, #0]
	while (1) {
 8001664:	e74f      	b.n	8001506 <main+0x3e>
 8001666:	bf00      	nop
 8001668:	200000a0 	.word	0x200000a0
 800166c:	080054e4 	.word	0x080054e4
 8001670:	200000a8 	.word	0x200000a8
 8001674:	2000009c 	.word	0x2000009c
 8001678:	20000008 	.word	0x20000008

0800167c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2230      	movs	r2, #48	; 0x30
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fb7a 	bl	8003d84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <SystemClock_Config+0xb8>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <SystemClock_Config+0xb8>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <SystemClock_Config+0xb8>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <SystemClock_Config+0xbc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <SystemClock_Config+0xbc>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <SystemClock_Config+0xbc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016dc:	2302      	movs	r3, #2
 80016de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e0:	2301      	movs	r3, #1
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e4:	2310      	movs	r3, #16
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fdf5 	bl	80022e0 <HAL_RCC_OscConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0x84>
		Error_Handler();
 80016fc:	f000 f81e 	bl	800173c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001700:	230f      	movs	r3, #15
 8001702:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f001 f858 	bl	80027d0 <HAL_RCC_ClockConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xae>
		Error_Handler();
 8001726:	f000 f809 	bl	800173c <Error_Handler>
	}
}
 800172a:	bf00      	nop
 800172c:	3750      	adds	r7, #80	; 0x50
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000

0800173c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>
	...

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_MspInit+0x4c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x4c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 f9da 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <USART6_IRQHandler+0x10>)
 80017f2:	f001 fb4f 	bl	8002e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000a8 	.word	0x200000a8

08001800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_kill>:

int _kill(int pid, int sig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800181a:	f002 fa73 	bl	8003d04 <__errno>
 800181e:	4603      	mov	r3, r0
 8001820:	2216      	movs	r2, #22
 8001822:	601a      	str	r2, [r3, #0]
	return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_exit>:

void _exit (int status)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001842:	e7fe      	b.n	8001842 <_exit+0x12>

08001844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e00a      	b.n	800186c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001856:	f3af 8000 	nop.w
 800185a:	4601      	mov	r1, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf0      	blt.n	8001856 <_read+0x12>
	}

return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e009      	b.n	80018a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf1      	blt.n	8001890 <_write+0x12>
	}
	return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_close>:

int _close(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
	return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f002 f9d8 	bl	8003d04 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20030000 	.word	0x20030000
 8001980:	00000400 	.word	0x00000400
 8001984:	200000a4 	.word	0x200000a4
 8001988:	20000100 	.word	0x20000100

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_USART6_UART_Init+0x50>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_USART6_UART_Init+0x4c>)
 80019e8:	f001 f8d2 	bl	8002b90 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019f2:	f7ff fea3 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000a8 	.word	0x200000a8
 8001a00:	40011400 	.word	0x40011400

08001a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <HAL_UART_MspInit+0x94>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d133      	bne.n	8001a8e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_UART_MspInit+0x98>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5e:	23c0      	movs	r3, #192	; 0xc0
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a6e:	2308      	movs	r3, #8
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <HAL_UART_MspInit+0x9c>)
 8001a7a:	f000 fa53 	bl	8001f24 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2047      	movs	r0, #71	; 0x47
 8001a84:	f000 f985 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a88:	2047      	movs	r0, #71	; 0x47
 8001a8a:	f000 f99e 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40011400 	.word	0x40011400
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020800 	.word	0x40020800

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac0:	4c0b      	ldr	r4, [pc, #44]	; (8001af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ace:	f7ff ff5d 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f002 f91d 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff fcf7 	bl	80014c8 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ae8:	080057cc 	.word	0x080057cc
  ldr r2, =_sbss
 8001aec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001af0:	20000100 	.word	0x20000100

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_Init+0x40>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_Init+0x40>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x40>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f92b 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fe0c 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f943 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f90b 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000014 	.word	0x20000014
 8001b98:	20000010 	.word	0x20000010

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000014 	.word	0x20000014
 8001bc0:	200000ec 	.word	0x200000ec

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200000ec 	.word	0x200000ec

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	; (8001c78 <__NVIC_EnableIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff29 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff3e 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff8e 	bl	8001cd0 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5d 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff31 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff feda 	bl	8001bc4 <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d008      	beq.n	8001e30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e052      	b.n	8001ed6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0216 	bic.w	r2, r2, #22
 8001e3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d103      	bne.n	8001e60 <HAL_DMA_Abort+0x62>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0208 	bic.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e80:	e013      	b.n	8001eaa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e82:	f7ff fe9f 	bl	8001bc4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d90c      	bls.n	8001eaa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2203      	movs	r2, #3
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e015      	b.n	8001ed6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1e4      	bne.n	8001e82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	223f      	movs	r2, #63	; 0x3f
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d004      	beq.n	8001efc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e00c      	b.n	8001f16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2205      	movs	r2, #5
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	e177      	b.n	8002230 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f040 8166 	bne.w	800222a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d005      	beq.n	8001f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d130      	bne.n	8001fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 0201 	and.w	r2, r3, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d017      	beq.n	8002014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d123      	bne.n	8002068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	08da      	lsrs	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3208      	adds	r2, #8
 8002028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0203 	and.w	r2, r3, #3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80c0 	beq.w	800222a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_GPIO_Init+0x324>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_GPIO_Init+0x324>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_GPIO_Init+0x324>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c6:	4a61      	ldr	r2, [pc, #388]	; (800224c <HAL_GPIO_Init+0x328>)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	220f      	movs	r2, #15
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_GPIO_Init+0x32c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d037      	beq.n	8002162 <HAL_GPIO_Init+0x23e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a57      	ldr	r2, [pc, #348]	; (8002254 <HAL_GPIO_Init+0x330>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d031      	beq.n	800215e <HAL_GPIO_Init+0x23a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a56      	ldr	r2, [pc, #344]	; (8002258 <HAL_GPIO_Init+0x334>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02b      	beq.n	800215a <HAL_GPIO_Init+0x236>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a55      	ldr	r2, [pc, #340]	; (800225c <HAL_GPIO_Init+0x338>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x232>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_GPIO_Init+0x33c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x22e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a53      	ldr	r2, [pc, #332]	; (8002264 <HAL_GPIO_Init+0x340>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x22a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_GPIO_Init+0x344>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x226>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a51      	ldr	r2, [pc, #324]	; (800226c <HAL_GPIO_Init+0x348>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x222>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a50      	ldr	r2, [pc, #320]	; (8002270 <HAL_GPIO_Init+0x34c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x21e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4f      	ldr	r2, [pc, #316]	; (8002274 <HAL_GPIO_Init+0x350>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x21a>
 800213a:	2309      	movs	r3, #9
 800213c:	e012      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800213e:	230a      	movs	r3, #10
 8002140:	e010      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002142:	2308      	movs	r3, #8
 8002144:	e00e      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002146:	2307      	movs	r3, #7
 8002148:	e00c      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800214a:	2306      	movs	r3, #6
 800214c:	e00a      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800214e:	2305      	movs	r3, #5
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002152:	2304      	movs	r3, #4
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002174:	4935      	ldr	r1, [pc, #212]	; (800224c <HAL_GPIO_Init+0x328>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <HAL_GPIO_Init+0x354>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a34      	ldr	r2, [pc, #208]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a29      	ldr	r2, [pc, #164]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fa:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <HAL_GPIO_Init+0x354>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_GPIO_Init+0x354>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <HAL_GPIO_Init+0x354>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f ae84 	bls.w	8001f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40013800 	.word	0x40013800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40020800 	.word	0x40020800
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40021400 	.word	0x40021400
 8002268:	40021800 	.word	0x40021800
 800226c:	40021c00 	.word	0x40021c00
 8002270:	40022000 	.word	0x40022000
 8002274:	40022400 	.word	0x40022400
 8002278:	40013c00 	.word	0x40013c00

0800227c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e001      	b.n	800229e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022bc:	787b      	ldrb	r3, [r7, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c8:	e003      	b.n	80022d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	041a      	lsls	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e267      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d075      	beq.n	80023ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fe:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d00c      	beq.n	8002324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b85      	ldr	r3, [pc, #532]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d112      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b82      	ldr	r3, [pc, #520]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002322:	d10b      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d157      	bne.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e242      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x74>
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x98>
 800235e:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002378:	4b69      	ldr	r3, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a68      	ldr	r2, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a65      	ldr	r2, [pc, #404]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fc14 	bl	8001bc4 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff fc10 	bl	8001bc4 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e207      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fc00 	bl	8001bc4 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fbfc 	bl	8001bc4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1f3      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b51      	ldr	r3, [pc, #324]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f6:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1c7      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4937      	ldr	r1, [pc, #220]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_OscConfig+0x244>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7ff fbb5 	bl	8001bc4 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245e:	f7ff fbb1 	bl	8001bc4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1a8      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4925      	ldr	r1, [pc, #148]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_OscConfig+0x244>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff fb94 	bl	8001bc4 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7ff fb90 	bl	8001bc4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e187      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d036      	beq.n	8002538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_RCC_OscConfig+0x248>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7ff fb74 	bl	8001bc4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff fb70 	bl	8001bc4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e167      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x200>
 80024fe:	e01b      	b.n	8002538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_OscConfig+0x248>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7ff fb5d 	bl	8001bc4 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e00e      	b.n	800252c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250e:	f7ff fb59 	bl	8001bc4 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d907      	bls.n	800252c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e150      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
 8002520:	40023800 	.word	0x40023800
 8002524:	42470000 	.word	0x42470000
 8002528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ea      	bne.n	800250e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8097 	beq.w	8002674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b7d      	ldr	r3, [pc, #500]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a7c      	ldr	r2, [pc, #496]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b77      	ldr	r3, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b74      	ldr	r3, [pc, #464]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a73      	ldr	r2, [pc, #460]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7ff fb19 	bl	8001bc4 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7ff fb15 	bl	8001bc4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e10c      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x2ea>
 80025bc:	4b64      	ldr	r3, [pc, #400]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a63      	ldr	r2, [pc, #396]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x324>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x30c>
 80025d2:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a5e      	ldr	r2, [pc, #376]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a5b      	ldr	r2, [pc, #364]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x324>
 80025ec:	4b58      	ldr	r3, [pc, #352]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a57      	ldr	r2, [pc, #348]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	4b55      	ldr	r3, [pc, #340]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a54      	ldr	r2, [pc, #336]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff fada 	bl	8001bc4 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7ff fad6 	bl	8001bc4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e0cb      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCC_OscConfig+0x334>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7ff fac4 	bl	8001bc4 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7ff fac0 	bl	8001bc4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0b5      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	4a38      	ldr	r2, [pc, #224]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800266e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002672:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a1 	beq.w	80027c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267e:	4b34      	ldr	r3, [pc, #208]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b08      	cmp	r3, #8
 8002688:	d05c      	beq.n	8002744 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d141      	bne.n	8002716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff fa94 	bl	8001bc4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7ff fa90 	bl	8001bc4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e087      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69da      	ldr	r2, [r3, #28]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	491b      	ldr	r1, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7ff fa69 	bl	8001bc4 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7ff fa65 	bl	8001bc4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e05c      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x416>
 8002714:	e054      	b.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff fa52 	bl	8001bc4 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7ff fa4e 	bl	8001bc4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e045      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x444>
 8002742:	e03d      	b.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e038      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
 8002750:	40023800 	.word	0x40023800
 8002754:	40007000 	.word	0x40007000
 8002758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d028      	beq.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d121      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d11a      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0cc      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d90c      	bls.n	800280c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800282e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d044      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d119      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	2b03      	cmp	r3, #3
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e067      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4934      	ldr	r1, [pc, #208]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7ff f980 	bl	8001bc4 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7ff f97c 	bl	8001bc4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d20c      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f8e0 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00
 800298c:	40023800 	.word	0x40023800
 8002990:	0800555c 	.word	0x0800555c
 8002994:	2000000c 	.word	0x2000000c
 8002998:	20000010 	.word	0x20000010

0800299c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a0:	b090      	sub	sp, #64	; 0x40
 80029a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	637b      	str	r3, [r7, #52]	; 0x34
 80029a8:	2300      	movs	r3, #0
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	2300      	movs	r3, #0
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d00d      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	f200 80a1 	bhi.w	8002b08 <HAL_RCC_GetSysClockFreq+0x16c>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ce:	e09b      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x184>)
 80029d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029d4:	e09b      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d6:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x188>)
 80029d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029da:	e098      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e6:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d028      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f2:	4b4a      	ldr	r3, [pc, #296]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	2200      	movs	r2, #0
 80029fa:	623b      	str	r3, [r7, #32]
 80029fc:	627a      	str	r2, [r7, #36]	; 0x24
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a04:	2100      	movs	r1, #0
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a08:	fb03 f201 	mul.w	r2, r3, r1
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	fb00 f303 	mul.w	r3, r0, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	4a43      	ldr	r2, [pc, #268]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a16:	fba0 1202 	umull	r1, r2, r0, r2
 8002a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a22:	4413      	add	r3, r2
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	2200      	movs	r2, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	61fa      	str	r2, [r7, #28]
 8002a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a36:	f7fd ff49 	bl	80008cc <__aeabi_uldivmod>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4613      	mov	r3, r2
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a42:	e053      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a44:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	617a      	str	r2, [r7, #20]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a56:	f04f 0b00 	mov.w	fp, #0
 8002a5a:	4652      	mov	r2, sl
 8002a5c:	465b      	mov	r3, fp
 8002a5e:	f04f 0000 	mov.w	r0, #0
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	0159      	lsls	r1, r3, #5
 8002a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a6c:	0150      	lsls	r0, r2, #5
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	ebb2 080a 	subs.w	r8, r2, sl
 8002a76:	eb63 090b 	sbc.w	r9, r3, fp
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002a92:	eb63 0509 	sbc.w	r5, r3, r9
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	00eb      	lsls	r3, r5, #3
 8002aa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aa4:	00e2      	lsls	r2, r4, #3
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	461d      	mov	r5, r3
 8002aaa:	eb14 030a 	adds.w	r3, r4, sl
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	eb45 030b 	adc.w	r3, r5, fp
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	028b      	lsls	r3, r1, #10
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002acc:	4621      	mov	r1, r4
 8002ace:	028a      	lsls	r2, r1, #10
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	60fa      	str	r2, [r7, #12]
 8002adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ae0:	f7fd fef4 	bl	80008cc <__aeabi_uldivmod>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	0c1b      	lsrs	r3, r3, #16
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	3301      	adds	r3, #1
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b06:	e002      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3740      	adds	r7, #64	; 0x40
 8002b14:	46bd      	mov	sp, r7
 8002b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	00f42400 	.word	0x00f42400
 8002b24:	017d7840 	.word	0x017d7840

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2000000c 	.word	0x2000000c

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff0 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0a9b      	lsrs	r3, r3, #10
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	0800556c 	.word	0x0800556c

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffdc 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0b5b      	lsrs	r3, r3, #13
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	0800556c 	.word	0x0800556c

08002b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e03f      	b.n	8002c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe ff24 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fe1d 	bl	8003814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	; 0x28
 8002c2e:	af02      	add	r7, sp, #8
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d17c      	bne.n	8002d44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_UART_Transmit+0x2c>
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e075      	b.n	8002d46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_UART_Transmit+0x3e>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e06e      	b.n	8002d46 <HAL_UART_Transmit+0x11c>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2221      	movs	r2, #33	; 0x21
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c7e:	f7fe ffa1 	bl	8001bc4 <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c98:	d108      	bne.n	8002cac <HAL_UART_Transmit+0x82>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d104      	bne.n	8002cac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	e003      	b.n	8002cb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cbc:	e02a      	b.n	8002d14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fb9b 	bl	8003404 <UART_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e036      	b.n	8002d46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10b      	bne.n	8002cf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	e007      	b.n	8002d06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	3301      	adds	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1cf      	bne.n	8002cbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2140      	movs	r1, #64	; 0x40
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fb6b 	bl	8003404 <UART_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e006      	b.n	8002d46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e000      	b.n	8002d46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
  }
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b08a      	sub	sp, #40	; 0x28
 8002d52:	af02      	add	r7, sp, #8
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	f040 808c 	bne.w	8002e88 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_UART_Receive+0x2e>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e084      	b.n	8002e8a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Receive+0x40>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e07d      	b.n	8002e8a <HAL_UART_Receive+0x13c>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2222      	movs	r2, #34	; 0x22
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002daa:	f7fe ff0b 	bl	8001bc4 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_UART_Receive+0x8a>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e003      	b.n	8002de0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002de8:	e043      	b.n	8002e72 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	2120      	movs	r1, #32
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fb05 	bl	8003404 <UART_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e042      	b.n	8002e8a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	e01f      	b.n	8002e64 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2c:	d007      	beq.n	8002e3e <HAL_UART_Receive+0xf0>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_UART_Receive+0xfe>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e008      	b.n	8002e5e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3301      	adds	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1b6      	bne.n	8002dea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b0ba      	sub	sp, #232	; 0xe8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_UART_IRQHandler+0x66>
 8002ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fbd3 	bl	800369e <UART_Receive_IT>
      return;
 8002ef8:	e256      	b.n	80033a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80de 	beq.w	80030c0 <HAL_UART_IRQHandler+0x22c>
 8002f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80d1 	beq.w	80030c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_UART_IRQHandler+0xae>
 8002f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_UART_IRQHandler+0xd2>
 8002f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0202 	orr.w	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_UART_IRQHandler+0xf6>
 8002f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f043 0204 	orr.w	r2, r3, #4
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d011      	beq.n	8002fba <HAL_UART_IRQHandler+0x126>
 8002f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f043 0208 	orr.w	r2, r3, #8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 81ed 	beq.w	800339e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x14e>
 8002fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb5e 	bl	800369e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d103      	bne.n	800300e <HAL_UART_IRQHandler+0x17a>
 8003006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d04f      	beq.n	80030ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fa66 	bl	80034e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d141      	bne.n	80030a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3314      	adds	r3, #20
 8003028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800303c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3314      	adds	r3, #20
 800304a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800304e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800305a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1d9      	bne.n	8003022 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	4a7d      	ldr	r2, [pc, #500]	; (8003270 <HAL_UART_IRQHandler+0x3dc>)
 800307c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe ff2b 	bl	8001ede <HAL_DMA_Abort_IT>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e00e      	b.n	80030bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f99a 	bl	80033d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	e00a      	b.n	80030bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f996 	bl	80033d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	e006      	b.n	80030bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f992 	bl	80033d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030ba:	e170      	b.n	800339e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030bc:	bf00      	nop
    return;
 80030be:	e16e      	b.n	800339e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 814a 	bne.w	800335e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8143 	beq.w	800335e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 813c 	beq.w	800335e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	f040 80b4 	bne.w	8003274 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8140 	beq.w	80033a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800312a:	429a      	cmp	r2, r3
 800312c:	f080 8139 	bcs.w	80033a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003136:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003142:	f000 8088 	beq.w	8003256 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800315c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	330c      	adds	r3, #12
 800316e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800317e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800318a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1d9      	bne.n	8003146 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3314      	adds	r3, #20
 8003198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3314      	adds	r3, #20
 80031b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e1      	bne.n	8003192 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e3      	bne.n	80031ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003226:	f023 0310 	bic.w	r3, r3, #16
 800322a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003238:	65ba      	str	r2, [r7, #88]	; 0x58
 800323a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800323e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e3      	bne.n	8003214 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fdd4 	bl	8001dfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800325e:	b29b      	uxth	r3, r3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	b29b      	uxth	r3, r3
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8c0 	bl	80033ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800326c:	e099      	b.n	80033a2 <HAL_UART_IRQHandler+0x50e>
 800326e:	bf00      	nop
 8003270:	080035a7 	.word	0x080035a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800327c:	b29b      	uxth	r3, r3
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 808b 	beq.w	80033a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8086 	beq.w	80033a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80032be:	647a      	str	r2, [r7, #68]	; 0x44
 80032c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e3      	bne.n	800329a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3314      	adds	r3, #20
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	623b      	str	r3, [r7, #32]
   return(result);
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032f6:	633a      	str	r2, [r7, #48]	; 0x30
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e3      	bne.n	80032d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	e853 3f00 	ldrex	r3, [r3]
 8003326:	60fb      	str	r3, [r7, #12]
   return(result);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0310 	bic.w	r3, r3, #16
 800332e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800333c:	61fa      	str	r2, [r7, #28]
 800333e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	69b9      	ldr	r1, [r7, #24]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	617b      	str	r3, [r7, #20]
   return(result);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e3      	bne.n	8003318 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f848 	bl	80033ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800335c:	e023      	b.n	80033a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_UART_IRQHandler+0x4ea>
 800336a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f929 	bl	80035ce <UART_Transmit_IT>
    return;
 800337c:	e014      	b.n	80033a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800337e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00e      	beq.n	80033a8 <HAL_UART_IRQHandler+0x514>
 800338a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f969 	bl	800366e <UART_EndTransmit_IT>
    return;
 800339c:	e004      	b.n	80033a8 <HAL_UART_IRQHandler+0x514>
    return;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <HAL_UART_IRQHandler+0x514>
      return;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <HAL_UART_IRQHandler+0x514>
      return;
 80033a6:	bf00      	nop
  }
}
 80033a8:	37e8      	adds	r7, #232	; 0xe8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop

080033b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b090      	sub	sp, #64	; 0x40
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003414:	e050      	b.n	80034b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d04c      	beq.n	80034b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800341e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <UART_WaitOnFlagUntilTimeout+0x30>
 8003424:	f7fe fbce 	bl	8001bc4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003430:	429a      	cmp	r2, r3
 8003432:	d241      	bcs.n	80034b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003454:	637a      	str	r2, [r7, #52]	; 0x34
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800345a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3314      	adds	r3, #20
 800346e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	613b      	str	r3, [r7, #16]
   return(result);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003488:	623a      	str	r2, [r7, #32]
 800348a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	69f9      	ldr	r1, [r7, #28]
 800348e:	6a3a      	ldr	r2, [r7, #32]
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	61bb      	str	r3, [r7, #24]
   return(result);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e00f      	b.n	80034d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4013      	ands	r3, r2
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d09f      	beq.n	8003416 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3740      	adds	r7, #64	; 0x40
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b095      	sub	sp, #84	; 0x54
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003508:	643a      	str	r2, [r7, #64]	; 0x40
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800350e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e5      	bne.n	80034e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3314      	adds	r3, #20
 8003522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	61fb      	str	r3, [r7, #28]
   return(result);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	64bb      	str	r3, [r7, #72]	; 0x48
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3314      	adds	r3, #20
 800353a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800353c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e5      	bne.n	800351c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	2b01      	cmp	r3, #1
 8003556:	d119      	bne.n	800358c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	60bb      	str	r3, [r7, #8]
   return(result);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f023 0310 	bic.w	r3, r3, #16
 800356e:	647b      	str	r3, [r7, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003578:	61ba      	str	r2, [r7, #24]
 800357a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6979      	ldr	r1, [r7, #20]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	613b      	str	r3, [r7, #16]
   return(result);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e5      	bne.n	8003558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
}
 800359a:	bf00      	nop
 800359c:	3754      	adds	r7, #84	; 0x54
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff ff09 	bl	80033d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b21      	cmp	r3, #33	; 0x21
 80035e0:	d13e      	bne.n	8003660 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d114      	bne.n	8003616 <UART_Transmit_IT+0x48>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d110      	bne.n	8003616 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003608:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	1c9a      	adds	r2, r3, #2
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	621a      	str	r2, [r3, #32]
 8003614:	e008      	b.n	8003628 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	1c59      	adds	r1, r3, #1
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6211      	str	r1, [r2, #32]
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29b      	uxth	r3, r3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10f      	bne.n	800365c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800364a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800365a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003684:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fe8e 	bl	80033b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b08c      	sub	sp, #48	; 0x30
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b22      	cmp	r3, #34	; 0x22
 80036b0:	f040 80ab 	bne.w	800380a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d117      	bne.n	80036ee <UART_Receive_IT+0x50>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d113      	bne.n	80036ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	1c9a      	adds	r2, r3, #2
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
 80036ec:	e026      	b.n	800373c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d007      	beq.n	8003712 <UART_Receive_IT+0x74>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <UART_Receive_IT+0x82>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e008      	b.n	8003732 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372c:	b2da      	uxtb	r2, r3
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800374c:	2b00      	cmp	r3, #0
 800374e:	d15a      	bne.n	8003806 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0220 	bic.w	r2, r2, #32
 800375e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800376e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	2b01      	cmp	r3, #1
 800378e:	d135      	bne.n	80037fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	613b      	str	r3, [r7, #16]
   return(result);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f023 0310 	bic.w	r3, r3, #16
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	623a      	str	r2, [r7, #32]
 80037b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	69f9      	ldr	r1, [r7, #28]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e5      	bne.n	8003796 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d10a      	bne.n	80037ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fdf9 	bl	80033ec <HAL_UARTEx_RxEventCallback>
 80037fa:	e002      	b.n	8003802 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fde1 	bl	80033c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e002      	b.n	800380c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3730      	adds	r7, #48	; 0x30
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b0c0      	sub	sp, #256	; 0x100
 800381a:	af00      	add	r7, sp, #0
 800381c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	68d9      	ldr	r1, [r3, #12]
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	ea40 0301 	orr.w	r3, r0, r1
 800383c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	431a      	orrs	r2, r3
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800386c:	f021 010c 	bic.w	r1, r1, #12
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800387a:	430b      	orrs	r3, r1
 800387c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	6999      	ldr	r1, [r3, #24]
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	ea40 0301 	orr.w	r3, r0, r1
 800389a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b8f      	ldr	r3, [pc, #572]	; (8003ae0 <UART_SetConfig+0x2cc>)
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d005      	beq.n	80038b4 <UART_SetConfig+0xa0>
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b8d      	ldr	r3, [pc, #564]	; (8003ae4 <UART_SetConfig+0x2d0>)
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d104      	bne.n	80038be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7ff f958 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 80038b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038bc:	e003      	b.n	80038c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038be:	f7ff f93f 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80038c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d0:	f040 810c 	bne.w	8003aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d8:	2200      	movs	r2, #0
 80038da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	1891      	adds	r1, r2, r2
 80038ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80038ee:	415b      	adcs	r3, r3
 80038f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038f6:	4621      	mov	r1, r4
 80038f8:	eb12 0801 	adds.w	r8, r2, r1
 80038fc:	4629      	mov	r1, r5
 80038fe:	eb43 0901 	adc.w	r9, r3, r1
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003916:	4690      	mov	r8, r2
 8003918:	4699      	mov	r9, r3
 800391a:	4623      	mov	r3, r4
 800391c:	eb18 0303 	adds.w	r3, r8, r3
 8003920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003924:	462b      	mov	r3, r5
 8003926:	eb49 0303 	adc.w	r3, r9, r3
 800392a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800393a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800393e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003942:	460b      	mov	r3, r1
 8003944:	18db      	adds	r3, r3, r3
 8003946:	653b      	str	r3, [r7, #80]	; 0x50
 8003948:	4613      	mov	r3, r2
 800394a:	eb42 0303 	adc.w	r3, r2, r3
 800394e:	657b      	str	r3, [r7, #84]	; 0x54
 8003950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003958:	f7fc ffb8 	bl	80008cc <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003962:	fba3 2302 	umull	r2, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	011c      	lsls	r4, r3, #4
 800396a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003974:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	1891      	adds	r1, r2, r2
 8003982:	64b9      	str	r1, [r7, #72]	; 0x48
 8003984:	415b      	adcs	r3, r3
 8003986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800398c:	4641      	mov	r1, r8
 800398e:	eb12 0a01 	adds.w	sl, r2, r1
 8003992:	4649      	mov	r1, r9
 8003994:	eb43 0b01 	adc.w	fp, r3, r1
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ac:	4692      	mov	sl, r2
 80039ae:	469b      	mov	fp, r3
 80039b0:	4643      	mov	r3, r8
 80039b2:	eb1a 0303 	adds.w	r3, sl, r3
 80039b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ba:	464b      	mov	r3, r9
 80039bc:	eb4b 0303 	adc.w	r3, fp, r3
 80039c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039d8:	460b      	mov	r3, r1
 80039da:	18db      	adds	r3, r3, r3
 80039dc:	643b      	str	r3, [r7, #64]	; 0x40
 80039de:	4613      	mov	r3, r2
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
 80039e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039ee:	f7fc ff6d 	bl	80008cc <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <UART_SetConfig+0x2d4>)
 80039fa:	fba3 2301 	umull	r2, r3, r3, r1
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2264      	movs	r2, #100	; 0x64
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	1acb      	subs	r3, r1, r3
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003a10:	fba3 2302 	umull	r2, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a1c:	441c      	add	r4, r3
 8003a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	1891      	adds	r1, r2, r2
 8003a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a38:	415b      	adcs	r3, r3
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a40:	4641      	mov	r1, r8
 8003a42:	1851      	adds	r1, r2, r1
 8003a44:	6339      	str	r1, [r7, #48]	; 0x30
 8003a46:	4649      	mov	r1, r9
 8003a48:	414b      	adcs	r3, r1
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a58:	4659      	mov	r1, fp
 8003a5a:	00cb      	lsls	r3, r1, #3
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a62:	4651      	mov	r1, sl
 8003a64:	00ca      	lsls	r2, r1, #3
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a94:	460b      	mov	r3, r1
 8003a96:	18db      	adds	r3, r3, r3
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003aaa:	f7fc ff0f 	bl	80008cc <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	2164      	movs	r1, #100	; 0x64
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	3332      	adds	r3, #50	; 0x32
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4422      	add	r2, r4
 8003ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003adc:	e105      	b.n	8003cea <UART_SetConfig+0x4d6>
 8003ade:	bf00      	nop
 8003ae0:	40011000 	.word	0x40011000
 8003ae4:	40011400 	.word	0x40011400
 8003ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003af6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	1891      	adds	r1, r2, r2
 8003b04:	6239      	str	r1, [r7, #32]
 8003b06:	415b      	adcs	r3, r3
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b0e:	4641      	mov	r1, r8
 8003b10:	1854      	adds	r4, r2, r1
 8003b12:	4649      	mov	r1, r9
 8003b14:	eb43 0501 	adc.w	r5, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	18e3      	adds	r3, r4, r3
 8003b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b34:	464b      	mov	r3, r9
 8003b36:	eb45 0303 	adc.w	r3, r5, r3
 8003b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	008b      	lsls	r3, r1, #2
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b64:	4621      	mov	r1, r4
 8003b66:	008a      	lsls	r2, r1, #2
 8003b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b6c:	f7fc feae 	bl	80008cc <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4b60      	ldr	r3, [pc, #384]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003b76:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	011c      	lsls	r4, r3, #4
 8003b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	61b9      	str	r1, [r7, #24]
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	1851      	adds	r1, r2, r1
 8003ba4:	6139      	str	r1, [r7, #16]
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	414b      	adcs	r3, r1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	00cb      	lsls	r3, r1, #3
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	00ca      	lsls	r2, r1, #3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4642      	mov	r2, r8
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	eb42 0303 	adc.w	r3, r2, r3
 8003bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	008b      	lsls	r3, r1, #2
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c02:	4641      	mov	r1, r8
 8003c04:	008a      	lsls	r2, r1, #2
 8003c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c0a:	f7fc fe5f 	bl	80008cc <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003c14:	fba3 1302 	umull	r1, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	2164      	movs	r1, #100	; 0x64
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	4a34      	ldr	r2, [pc, #208]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c32:	441c      	add	r4, r3
 8003c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c38:	2200      	movs	r2, #0
 8003c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c3c:	677a      	str	r2, [r7, #116]	; 0x74
 8003c3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c42:	4642      	mov	r2, r8
 8003c44:	464b      	mov	r3, r9
 8003c46:	1891      	adds	r1, r2, r2
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	415b      	adcs	r3, r3
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c52:	4641      	mov	r1, r8
 8003c54:	1851      	adds	r1, r2, r1
 8003c56:	6039      	str	r1, [r7, #0]
 8003c58:	4649      	mov	r1, r9
 8003c5a:	414b      	adcs	r3, r1
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c6a:	4659      	mov	r1, fp
 8003c6c:	00cb      	lsls	r3, r1, #3
 8003c6e:	4651      	mov	r1, sl
 8003c70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c74:	4651      	mov	r1, sl
 8003c76:	00ca      	lsls	r2, r1, #3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4642      	mov	r2, r8
 8003c80:	189b      	adds	r3, r3, r2
 8003c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c84:	464b      	mov	r3, r9
 8003c86:	460a      	mov	r2, r1
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	663b      	str	r3, [r7, #96]	; 0x60
 8003c98:	667a      	str	r2, [r7, #100]	; 0x64
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	008b      	lsls	r3, r1, #2
 8003caa:	4641      	mov	r1, r8
 8003cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	008a      	lsls	r2, r1, #2
 8003cb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cb8:	f7fc fe08 	bl	80008cc <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2164      	movs	r1, #100	; 0x64
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	3332      	adds	r3, #50	; 0x32
 8003cd4:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4422      	add	r2, r4
 8003ce8:	609a      	str	r2, [r3, #8]
}
 8003cea:	bf00      	nop
 8003cec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf6:	bf00      	nop
 8003cf8:	51eb851f 	.word	0x51eb851f

08003cfc <atoi>:
 8003cfc:	220a      	movs	r2, #10
 8003cfe:	2100      	movs	r1, #0
 8003d00:	f000 ba36 	b.w	8004170 <strtol>

08003d04 <__errno>:
 8003d04:	4b01      	ldr	r3, [pc, #4]	; (8003d0c <__errno+0x8>)
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000018 	.word	0x20000018

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4d0d      	ldr	r5, [pc, #52]	; (8003d48 <__libc_init_array+0x38>)
 8003d14:	4c0d      	ldr	r4, [pc, #52]	; (8003d4c <__libc_init_array+0x3c>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	4d0b      	ldr	r5, [pc, #44]	; (8003d50 <__libc_init_array+0x40>)
 8003d22:	4c0c      	ldr	r4, [pc, #48]	; (8003d54 <__libc_init_array+0x44>)
 8003d24:	f001 fade 	bl	80052e4 <_init>
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	080057c4 	.word	0x080057c4
 8003d4c:	080057c4 	.word	0x080057c4
 8003d50:	080057c4 	.word	0x080057c4
 8003d54:	080057c8 	.word	0x080057c8

08003d58 <malloc>:
 8003d58:	4b02      	ldr	r3, [pc, #8]	; (8003d64 <malloc+0xc>)
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f000 b885 	b.w	8003e6c <_malloc_r>
 8003d62:	bf00      	nop
 8003d64:	20000018 	.word	0x20000018

08003d68 <memcpy>:
 8003d68:	440a      	add	r2, r1
 8003d6a:	4291      	cmp	r1, r2
 8003d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d70:	d100      	bne.n	8003d74 <memcpy+0xc>
 8003d72:	4770      	bx	lr
 8003d74:	b510      	push	{r4, lr}
 8003d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d7e:	4291      	cmp	r1, r2
 8003d80:	d1f9      	bne.n	8003d76 <memcpy+0xe>
 8003d82:	bd10      	pop	{r4, pc}

08003d84 <memset>:
 8003d84:	4402      	add	r2, r0
 8003d86:	4603      	mov	r3, r0
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d100      	bne.n	8003d8e <memset+0xa>
 8003d8c:	4770      	bx	lr
 8003d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d92:	e7f9      	b.n	8003d88 <memset+0x4>

08003d94 <_free_r>:
 8003d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d96:	2900      	cmp	r1, #0
 8003d98:	d044      	beq.n	8003e24 <_free_r+0x90>
 8003d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d9e:	9001      	str	r0, [sp, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f1a1 0404 	sub.w	r4, r1, #4
 8003da6:	bfb8      	it	lt
 8003da8:	18e4      	addlt	r4, r4, r3
 8003daa:	f000 fa1b 	bl	80041e4 <__malloc_lock>
 8003dae:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <_free_r+0x94>)
 8003db0:	9801      	ldr	r0, [sp, #4]
 8003db2:	6813      	ldr	r3, [r2, #0]
 8003db4:	b933      	cbnz	r3, 8003dc4 <_free_r+0x30>
 8003db6:	6063      	str	r3, [r4, #4]
 8003db8:	6014      	str	r4, [r2, #0]
 8003dba:	b003      	add	sp, #12
 8003dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dc0:	f000 ba16 	b.w	80041f0 <__malloc_unlock>
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d908      	bls.n	8003dda <_free_r+0x46>
 8003dc8:	6825      	ldr	r5, [r4, #0]
 8003dca:	1961      	adds	r1, r4, r5
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	bf01      	itttt	eq
 8003dd0:	6819      	ldreq	r1, [r3, #0]
 8003dd2:	685b      	ldreq	r3, [r3, #4]
 8003dd4:	1949      	addeq	r1, r1, r5
 8003dd6:	6021      	streq	r1, [r4, #0]
 8003dd8:	e7ed      	b.n	8003db6 <_free_r+0x22>
 8003dda:	461a      	mov	r2, r3
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b10b      	cbz	r3, 8003de4 <_free_r+0x50>
 8003de0:	42a3      	cmp	r3, r4
 8003de2:	d9fa      	bls.n	8003dda <_free_r+0x46>
 8003de4:	6811      	ldr	r1, [r2, #0]
 8003de6:	1855      	adds	r5, r2, r1
 8003de8:	42a5      	cmp	r5, r4
 8003dea:	d10b      	bne.n	8003e04 <_free_r+0x70>
 8003dec:	6824      	ldr	r4, [r4, #0]
 8003dee:	4421      	add	r1, r4
 8003df0:	1854      	adds	r4, r2, r1
 8003df2:	42a3      	cmp	r3, r4
 8003df4:	6011      	str	r1, [r2, #0]
 8003df6:	d1e0      	bne.n	8003dba <_free_r+0x26>
 8003df8:	681c      	ldr	r4, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	6053      	str	r3, [r2, #4]
 8003dfe:	4421      	add	r1, r4
 8003e00:	6011      	str	r1, [r2, #0]
 8003e02:	e7da      	b.n	8003dba <_free_r+0x26>
 8003e04:	d902      	bls.n	8003e0c <_free_r+0x78>
 8003e06:	230c      	movs	r3, #12
 8003e08:	6003      	str	r3, [r0, #0]
 8003e0a:	e7d6      	b.n	8003dba <_free_r+0x26>
 8003e0c:	6825      	ldr	r5, [r4, #0]
 8003e0e:	1961      	adds	r1, r4, r5
 8003e10:	428b      	cmp	r3, r1
 8003e12:	bf04      	itt	eq
 8003e14:	6819      	ldreq	r1, [r3, #0]
 8003e16:	685b      	ldreq	r3, [r3, #4]
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	bf04      	itt	eq
 8003e1c:	1949      	addeq	r1, r1, r5
 8003e1e:	6021      	streq	r1, [r4, #0]
 8003e20:	6054      	str	r4, [r2, #4]
 8003e22:	e7ca      	b.n	8003dba <_free_r+0x26>
 8003e24:	b003      	add	sp, #12
 8003e26:	bd30      	pop	{r4, r5, pc}
 8003e28:	200000f0 	.word	0x200000f0

08003e2c <sbrk_aligned>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	4e0e      	ldr	r6, [pc, #56]	; (8003e68 <sbrk_aligned+0x3c>)
 8003e30:	460c      	mov	r4, r1
 8003e32:	6831      	ldr	r1, [r6, #0]
 8003e34:	4605      	mov	r5, r0
 8003e36:	b911      	cbnz	r1, 8003e3e <sbrk_aligned+0x12>
 8003e38:	f000 f88c 	bl	8003f54 <_sbrk_r>
 8003e3c:	6030      	str	r0, [r6, #0]
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4628      	mov	r0, r5
 8003e42:	f000 f887 	bl	8003f54 <_sbrk_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	d00a      	beq.n	8003e60 <sbrk_aligned+0x34>
 8003e4a:	1cc4      	adds	r4, r0, #3
 8003e4c:	f024 0403 	bic.w	r4, r4, #3
 8003e50:	42a0      	cmp	r0, r4
 8003e52:	d007      	beq.n	8003e64 <sbrk_aligned+0x38>
 8003e54:	1a21      	subs	r1, r4, r0
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 f87c 	bl	8003f54 <_sbrk_r>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d101      	bne.n	8003e64 <sbrk_aligned+0x38>
 8003e60:	f04f 34ff 	mov.w	r4, #4294967295
 8003e64:	4620      	mov	r0, r4
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	200000f4 	.word	0x200000f4

08003e6c <_malloc_r>:
 8003e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e70:	1ccd      	adds	r5, r1, #3
 8003e72:	f025 0503 	bic.w	r5, r5, #3
 8003e76:	3508      	adds	r5, #8
 8003e78:	2d0c      	cmp	r5, #12
 8003e7a:	bf38      	it	cc
 8003e7c:	250c      	movcc	r5, #12
 8003e7e:	2d00      	cmp	r5, #0
 8003e80:	4607      	mov	r7, r0
 8003e82:	db01      	blt.n	8003e88 <_malloc_r+0x1c>
 8003e84:	42a9      	cmp	r1, r5
 8003e86:	d905      	bls.n	8003e94 <_malloc_r+0x28>
 8003e88:	230c      	movs	r3, #12
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	4630      	mov	r0, r6
 8003e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e94:	4e2e      	ldr	r6, [pc, #184]	; (8003f50 <_malloc_r+0xe4>)
 8003e96:	f000 f9a5 	bl	80041e4 <__malloc_lock>
 8003e9a:	6833      	ldr	r3, [r6, #0]
 8003e9c:	461c      	mov	r4, r3
 8003e9e:	bb34      	cbnz	r4, 8003eee <_malloc_r+0x82>
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	f7ff ffc2 	bl	8003e2c <sbrk_aligned>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	4604      	mov	r4, r0
 8003eac:	d14d      	bne.n	8003f4a <_malloc_r+0xde>
 8003eae:	6834      	ldr	r4, [r6, #0]
 8003eb0:	4626      	mov	r6, r4
 8003eb2:	2e00      	cmp	r6, #0
 8003eb4:	d140      	bne.n	8003f38 <_malloc_r+0xcc>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	4631      	mov	r1, r6
 8003eba:	4638      	mov	r0, r7
 8003ebc:	eb04 0803 	add.w	r8, r4, r3
 8003ec0:	f000 f848 	bl	8003f54 <_sbrk_r>
 8003ec4:	4580      	cmp	r8, r0
 8003ec6:	d13a      	bne.n	8003f3e <_malloc_r+0xd2>
 8003ec8:	6821      	ldr	r1, [r4, #0]
 8003eca:	3503      	adds	r5, #3
 8003ecc:	1a6d      	subs	r5, r5, r1
 8003ece:	f025 0503 	bic.w	r5, r5, #3
 8003ed2:	3508      	adds	r5, #8
 8003ed4:	2d0c      	cmp	r5, #12
 8003ed6:	bf38      	it	cc
 8003ed8:	250c      	movcc	r5, #12
 8003eda:	4629      	mov	r1, r5
 8003edc:	4638      	mov	r0, r7
 8003ede:	f7ff ffa5 	bl	8003e2c <sbrk_aligned>
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d02b      	beq.n	8003f3e <_malloc_r+0xd2>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	442b      	add	r3, r5
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	e00e      	b.n	8003f0c <_malloc_r+0xa0>
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	1b52      	subs	r2, r2, r5
 8003ef2:	d41e      	bmi.n	8003f32 <_malloc_r+0xc6>
 8003ef4:	2a0b      	cmp	r2, #11
 8003ef6:	d916      	bls.n	8003f26 <_malloc_r+0xba>
 8003ef8:	1961      	adds	r1, r4, r5
 8003efa:	42a3      	cmp	r3, r4
 8003efc:	6025      	str	r5, [r4, #0]
 8003efe:	bf18      	it	ne
 8003f00:	6059      	strne	r1, [r3, #4]
 8003f02:	6863      	ldr	r3, [r4, #4]
 8003f04:	bf08      	it	eq
 8003f06:	6031      	streq	r1, [r6, #0]
 8003f08:	5162      	str	r2, [r4, r5]
 8003f0a:	604b      	str	r3, [r1, #4]
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	f104 060b 	add.w	r6, r4, #11
 8003f12:	f000 f96d 	bl	80041f0 <__malloc_unlock>
 8003f16:	f026 0607 	bic.w	r6, r6, #7
 8003f1a:	1d23      	adds	r3, r4, #4
 8003f1c:	1af2      	subs	r2, r6, r3
 8003f1e:	d0b6      	beq.n	8003e8e <_malloc_r+0x22>
 8003f20:	1b9b      	subs	r3, r3, r6
 8003f22:	50a3      	str	r3, [r4, r2]
 8003f24:	e7b3      	b.n	8003e8e <_malloc_r+0x22>
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	bf0c      	ite	eq
 8003f2c:	6032      	streq	r2, [r6, #0]
 8003f2e:	605a      	strne	r2, [r3, #4]
 8003f30:	e7ec      	b.n	8003f0c <_malloc_r+0xa0>
 8003f32:	4623      	mov	r3, r4
 8003f34:	6864      	ldr	r4, [r4, #4]
 8003f36:	e7b2      	b.n	8003e9e <_malloc_r+0x32>
 8003f38:	4634      	mov	r4, r6
 8003f3a:	6876      	ldr	r6, [r6, #4]
 8003f3c:	e7b9      	b.n	8003eb2 <_malloc_r+0x46>
 8003f3e:	230c      	movs	r3, #12
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4638      	mov	r0, r7
 8003f44:	f000 f954 	bl	80041f0 <__malloc_unlock>
 8003f48:	e7a1      	b.n	8003e8e <_malloc_r+0x22>
 8003f4a:	6025      	str	r5, [r4, #0]
 8003f4c:	e7de      	b.n	8003f0c <_malloc_r+0xa0>
 8003f4e:	bf00      	nop
 8003f50:	200000f0 	.word	0x200000f0

08003f54 <_sbrk_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4d06      	ldr	r5, [pc, #24]	; (8003f70 <_sbrk_r+0x1c>)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	602b      	str	r3, [r5, #0]
 8003f60:	f7fd fcde 	bl	8001920 <_sbrk>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d102      	bne.n	8003f6e <_sbrk_r+0x1a>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	b103      	cbz	r3, 8003f6e <_sbrk_r+0x1a>
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	200000f8 	.word	0x200000f8

08003f74 <siprintf>:
 8003f74:	b40e      	push	{r1, r2, r3}
 8003f76:	b500      	push	{lr}
 8003f78:	b09c      	sub	sp, #112	; 0x70
 8003f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f7c:	9002      	str	r0, [sp, #8]
 8003f7e:	9006      	str	r0, [sp, #24]
 8003f80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f84:	4809      	ldr	r0, [pc, #36]	; (8003fac <siprintf+0x38>)
 8003f86:	9107      	str	r1, [sp, #28]
 8003f88:	9104      	str	r1, [sp, #16]
 8003f8a:	4909      	ldr	r1, [pc, #36]	; (8003fb0 <siprintf+0x3c>)
 8003f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f90:	9105      	str	r1, [sp, #20]
 8003f92:	6800      	ldr	r0, [r0, #0]
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	a902      	add	r1, sp, #8
 8003f98:	f000 f98c 	bl	80042b4 <_svfiprintf_r>
 8003f9c:	9b02      	ldr	r3, [sp, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	b01c      	add	sp, #112	; 0x70
 8003fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa8:	b003      	add	sp, #12
 8003faa:	4770      	bx	lr
 8003fac:	20000018 	.word	0x20000018
 8003fb0:	ffff0208 	.word	0xffff0208

08003fb4 <strtok>:
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <strtok+0x5c>)
 8003fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fb8:	681e      	ldr	r6, [r3, #0]
 8003fba:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	b9fc      	cbnz	r4, 8004000 <strtok+0x4c>
 8003fc0:	2050      	movs	r0, #80	; 0x50
 8003fc2:	9101      	str	r1, [sp, #4]
 8003fc4:	f7ff fec8 	bl	8003d58 <malloc>
 8003fc8:	9901      	ldr	r1, [sp, #4]
 8003fca:	65b0      	str	r0, [r6, #88]	; 0x58
 8003fcc:	4602      	mov	r2, r0
 8003fce:	b920      	cbnz	r0, 8003fda <strtok+0x26>
 8003fd0:	4b10      	ldr	r3, [pc, #64]	; (8004014 <strtok+0x60>)
 8003fd2:	4811      	ldr	r0, [pc, #68]	; (8004018 <strtok+0x64>)
 8003fd4:	2157      	movs	r1, #87	; 0x57
 8003fd6:	f000 f8d5 	bl	8004184 <__assert_func>
 8003fda:	e9c0 4400 	strd	r4, r4, [r0]
 8003fde:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003fe2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003fe6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003fea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003fee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003ff2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003ff6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003ffa:	6184      	str	r4, [r0, #24]
 8003ffc:	7704      	strb	r4, [r0, #28]
 8003ffe:	6244      	str	r4, [r0, #36]	; 0x24
 8004000:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004002:	2301      	movs	r3, #1
 8004004:	4628      	mov	r0, r5
 8004006:	b002      	add	sp, #8
 8004008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800400c:	f000 b806 	b.w	800401c <__strtok_r>
 8004010:	20000018 	.word	0x20000018
 8004014:	08005578 	.word	0x08005578
 8004018:	0800558f 	.word	0x0800558f

0800401c <__strtok_r>:
 800401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401e:	b908      	cbnz	r0, 8004024 <__strtok_r+0x8>
 8004020:	6810      	ldr	r0, [r2, #0]
 8004022:	b188      	cbz	r0, 8004048 <__strtok_r+0x2c>
 8004024:	4604      	mov	r4, r0
 8004026:	4620      	mov	r0, r4
 8004028:	f814 5b01 	ldrb.w	r5, [r4], #1
 800402c:	460f      	mov	r7, r1
 800402e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004032:	b91e      	cbnz	r6, 800403c <__strtok_r+0x20>
 8004034:	b965      	cbnz	r5, 8004050 <__strtok_r+0x34>
 8004036:	6015      	str	r5, [r2, #0]
 8004038:	4628      	mov	r0, r5
 800403a:	e005      	b.n	8004048 <__strtok_r+0x2c>
 800403c:	42b5      	cmp	r5, r6
 800403e:	d1f6      	bne.n	800402e <__strtok_r+0x12>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <__strtok_r+0xa>
 8004044:	6014      	str	r4, [r2, #0]
 8004046:	7003      	strb	r3, [r0, #0]
 8004048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404a:	461c      	mov	r4, r3
 800404c:	e00c      	b.n	8004068 <__strtok_r+0x4c>
 800404e:	b915      	cbnz	r5, 8004056 <__strtok_r+0x3a>
 8004050:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004054:	460e      	mov	r6, r1
 8004056:	f816 5b01 	ldrb.w	r5, [r6], #1
 800405a:	42ab      	cmp	r3, r5
 800405c:	d1f7      	bne.n	800404e <__strtok_r+0x32>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f3      	beq.n	800404a <__strtok_r+0x2e>
 8004062:	2300      	movs	r3, #0
 8004064:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004068:	6014      	str	r4, [r2, #0]
 800406a:	e7ed      	b.n	8004048 <__strtok_r+0x2c>

0800406c <_strtol_l.constprop.0>:
 800406c:	2b01      	cmp	r3, #1
 800406e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004072:	d001      	beq.n	8004078 <_strtol_l.constprop.0+0xc>
 8004074:	2b24      	cmp	r3, #36	; 0x24
 8004076:	d906      	bls.n	8004086 <_strtol_l.constprop.0+0x1a>
 8004078:	f7ff fe44 	bl	8003d04 <__errno>
 800407c:	2316      	movs	r3, #22
 800407e:	6003      	str	r3, [r0, #0]
 8004080:	2000      	movs	r0, #0
 8004082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004086:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800416c <_strtol_l.constprop.0+0x100>
 800408a:	460d      	mov	r5, r1
 800408c:	462e      	mov	r6, r5
 800408e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004092:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004096:	f017 0708 	ands.w	r7, r7, #8
 800409a:	d1f7      	bne.n	800408c <_strtol_l.constprop.0+0x20>
 800409c:	2c2d      	cmp	r4, #45	; 0x2d
 800409e:	d132      	bne.n	8004106 <_strtol_l.constprop.0+0x9a>
 80040a0:	782c      	ldrb	r4, [r5, #0]
 80040a2:	2701      	movs	r7, #1
 80040a4:	1cb5      	adds	r5, r6, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d05b      	beq.n	8004162 <_strtol_l.constprop.0+0xf6>
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d109      	bne.n	80040c2 <_strtol_l.constprop.0+0x56>
 80040ae:	2c30      	cmp	r4, #48	; 0x30
 80040b0:	d107      	bne.n	80040c2 <_strtol_l.constprop.0+0x56>
 80040b2:	782c      	ldrb	r4, [r5, #0]
 80040b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80040b8:	2c58      	cmp	r4, #88	; 0x58
 80040ba:	d14d      	bne.n	8004158 <_strtol_l.constprop.0+0xec>
 80040bc:	786c      	ldrb	r4, [r5, #1]
 80040be:	2310      	movs	r3, #16
 80040c0:	3502      	adds	r5, #2
 80040c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80040c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80040ca:	f04f 0c00 	mov.w	ip, #0
 80040ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80040d2:	4666      	mov	r6, ip
 80040d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80040d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80040dc:	f1be 0f09 	cmp.w	lr, #9
 80040e0:	d816      	bhi.n	8004110 <_strtol_l.constprop.0+0xa4>
 80040e2:	4674      	mov	r4, lr
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	dd24      	ble.n	8004132 <_strtol_l.constprop.0+0xc6>
 80040e8:	f1bc 0f00 	cmp.w	ip, #0
 80040ec:	db1e      	blt.n	800412c <_strtol_l.constprop.0+0xc0>
 80040ee:	45b1      	cmp	r9, r6
 80040f0:	d31c      	bcc.n	800412c <_strtol_l.constprop.0+0xc0>
 80040f2:	d101      	bne.n	80040f8 <_strtol_l.constprop.0+0x8c>
 80040f4:	45a2      	cmp	sl, r4
 80040f6:	db19      	blt.n	800412c <_strtol_l.constprop.0+0xc0>
 80040f8:	fb06 4603 	mla	r6, r6, r3, r4
 80040fc:	f04f 0c01 	mov.w	ip, #1
 8004100:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004104:	e7e8      	b.n	80040d8 <_strtol_l.constprop.0+0x6c>
 8004106:	2c2b      	cmp	r4, #43	; 0x2b
 8004108:	bf04      	itt	eq
 800410a:	782c      	ldrbeq	r4, [r5, #0]
 800410c:	1cb5      	addeq	r5, r6, #2
 800410e:	e7ca      	b.n	80040a6 <_strtol_l.constprop.0+0x3a>
 8004110:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004114:	f1be 0f19 	cmp.w	lr, #25
 8004118:	d801      	bhi.n	800411e <_strtol_l.constprop.0+0xb2>
 800411a:	3c37      	subs	r4, #55	; 0x37
 800411c:	e7e2      	b.n	80040e4 <_strtol_l.constprop.0+0x78>
 800411e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004122:	f1be 0f19 	cmp.w	lr, #25
 8004126:	d804      	bhi.n	8004132 <_strtol_l.constprop.0+0xc6>
 8004128:	3c57      	subs	r4, #87	; 0x57
 800412a:	e7db      	b.n	80040e4 <_strtol_l.constprop.0+0x78>
 800412c:	f04f 3cff 	mov.w	ip, #4294967295
 8004130:	e7e6      	b.n	8004100 <_strtol_l.constprop.0+0x94>
 8004132:	f1bc 0f00 	cmp.w	ip, #0
 8004136:	da05      	bge.n	8004144 <_strtol_l.constprop.0+0xd8>
 8004138:	2322      	movs	r3, #34	; 0x22
 800413a:	6003      	str	r3, [r0, #0]
 800413c:	4646      	mov	r6, r8
 800413e:	b942      	cbnz	r2, 8004152 <_strtol_l.constprop.0+0xe6>
 8004140:	4630      	mov	r0, r6
 8004142:	e79e      	b.n	8004082 <_strtol_l.constprop.0+0x16>
 8004144:	b107      	cbz	r7, 8004148 <_strtol_l.constprop.0+0xdc>
 8004146:	4276      	negs	r6, r6
 8004148:	2a00      	cmp	r2, #0
 800414a:	d0f9      	beq.n	8004140 <_strtol_l.constprop.0+0xd4>
 800414c:	f1bc 0f00 	cmp.w	ip, #0
 8004150:	d000      	beq.n	8004154 <_strtol_l.constprop.0+0xe8>
 8004152:	1e69      	subs	r1, r5, #1
 8004154:	6011      	str	r1, [r2, #0]
 8004156:	e7f3      	b.n	8004140 <_strtol_l.constprop.0+0xd4>
 8004158:	2430      	movs	r4, #48	; 0x30
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1b1      	bne.n	80040c2 <_strtol_l.constprop.0+0x56>
 800415e:	2308      	movs	r3, #8
 8004160:	e7af      	b.n	80040c2 <_strtol_l.constprop.0+0x56>
 8004162:	2c30      	cmp	r4, #48	; 0x30
 8004164:	d0a5      	beq.n	80040b2 <_strtol_l.constprop.0+0x46>
 8004166:	230a      	movs	r3, #10
 8004168:	e7ab      	b.n	80040c2 <_strtol_l.constprop.0+0x56>
 800416a:	bf00      	nop
 800416c:	08005629 	.word	0x08005629

08004170 <strtol>:
 8004170:	4613      	mov	r3, r2
 8004172:	460a      	mov	r2, r1
 8004174:	4601      	mov	r1, r0
 8004176:	4802      	ldr	r0, [pc, #8]	; (8004180 <strtol+0x10>)
 8004178:	6800      	ldr	r0, [r0, #0]
 800417a:	f7ff bf77 	b.w	800406c <_strtol_l.constprop.0>
 800417e:	bf00      	nop
 8004180:	20000018 	.word	0x20000018

08004184 <__assert_func>:
 8004184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004186:	4614      	mov	r4, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <__assert_func+0x2c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4605      	mov	r5, r0
 8004190:	68d8      	ldr	r0, [r3, #12]
 8004192:	b14c      	cbz	r4, 80041a8 <__assert_func+0x24>
 8004194:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <__assert_func+0x30>)
 8004196:	9100      	str	r1, [sp, #0]
 8004198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800419c:	4906      	ldr	r1, [pc, #24]	; (80041b8 <__assert_func+0x34>)
 800419e:	462b      	mov	r3, r5
 80041a0:	f000 f80e 	bl	80041c0 <fiprintf>
 80041a4:	f000 fd34 	bl	8004c10 <abort>
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <__assert_func+0x38>)
 80041aa:	461c      	mov	r4, r3
 80041ac:	e7f3      	b.n	8004196 <__assert_func+0x12>
 80041ae:	bf00      	nop
 80041b0:	20000018 	.word	0x20000018
 80041b4:	080055ec 	.word	0x080055ec
 80041b8:	080055f9 	.word	0x080055f9
 80041bc:	08005627 	.word	0x08005627

080041c0 <fiprintf>:
 80041c0:	b40e      	push	{r1, r2, r3}
 80041c2:	b503      	push	{r0, r1, lr}
 80041c4:	4601      	mov	r1, r0
 80041c6:	ab03      	add	r3, sp, #12
 80041c8:	4805      	ldr	r0, [pc, #20]	; (80041e0 <fiprintf+0x20>)
 80041ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ce:	6800      	ldr	r0, [r0, #0]
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	f000 f999 	bl	8004508 <_vfiprintf_r>
 80041d6:	b002      	add	sp, #8
 80041d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041dc:	b003      	add	sp, #12
 80041de:	4770      	bx	lr
 80041e0:	20000018 	.word	0x20000018

080041e4 <__malloc_lock>:
 80041e4:	4801      	ldr	r0, [pc, #4]	; (80041ec <__malloc_lock+0x8>)
 80041e6:	f000 bed3 	b.w	8004f90 <__retarget_lock_acquire_recursive>
 80041ea:	bf00      	nop
 80041ec:	200000fc 	.word	0x200000fc

080041f0 <__malloc_unlock>:
 80041f0:	4801      	ldr	r0, [pc, #4]	; (80041f8 <__malloc_unlock+0x8>)
 80041f2:	f000 bece 	b.w	8004f92 <__retarget_lock_release_recursive>
 80041f6:	bf00      	nop
 80041f8:	200000fc 	.word	0x200000fc

080041fc <__ssputs_r>:
 80041fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	688e      	ldr	r6, [r1, #8]
 8004202:	429e      	cmp	r6, r3
 8004204:	4682      	mov	sl, r0
 8004206:	460c      	mov	r4, r1
 8004208:	4690      	mov	r8, r2
 800420a:	461f      	mov	r7, r3
 800420c:	d838      	bhi.n	8004280 <__ssputs_r+0x84>
 800420e:	898a      	ldrh	r2, [r1, #12]
 8004210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004214:	d032      	beq.n	800427c <__ssputs_r+0x80>
 8004216:	6825      	ldr	r5, [r4, #0]
 8004218:	6909      	ldr	r1, [r1, #16]
 800421a:	eba5 0901 	sub.w	r9, r5, r1
 800421e:	6965      	ldr	r5, [r4, #20]
 8004220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004228:	3301      	adds	r3, #1
 800422a:	444b      	add	r3, r9
 800422c:	106d      	asrs	r5, r5, #1
 800422e:	429d      	cmp	r5, r3
 8004230:	bf38      	it	cc
 8004232:	461d      	movcc	r5, r3
 8004234:	0553      	lsls	r3, r2, #21
 8004236:	d531      	bpl.n	800429c <__ssputs_r+0xa0>
 8004238:	4629      	mov	r1, r5
 800423a:	f7ff fe17 	bl	8003e6c <_malloc_r>
 800423e:	4606      	mov	r6, r0
 8004240:	b950      	cbnz	r0, 8004258 <__ssputs_r+0x5c>
 8004242:	230c      	movs	r3, #12
 8004244:	f8ca 3000 	str.w	r3, [sl]
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424e:	81a3      	strh	r3, [r4, #12]
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004258:	6921      	ldr	r1, [r4, #16]
 800425a:	464a      	mov	r2, r9
 800425c:	f7ff fd84 	bl	8003d68 <memcpy>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	6126      	str	r6, [r4, #16]
 800426e:	6165      	str	r5, [r4, #20]
 8004270:	444e      	add	r6, r9
 8004272:	eba5 0509 	sub.w	r5, r5, r9
 8004276:	6026      	str	r6, [r4, #0]
 8004278:	60a5      	str	r5, [r4, #8]
 800427a:	463e      	mov	r6, r7
 800427c:	42be      	cmp	r6, r7
 800427e:	d900      	bls.n	8004282 <__ssputs_r+0x86>
 8004280:	463e      	mov	r6, r7
 8004282:	6820      	ldr	r0, [r4, #0]
 8004284:	4632      	mov	r2, r6
 8004286:	4641      	mov	r1, r8
 8004288:	f000 feea 	bl	8005060 <memmove>
 800428c:	68a3      	ldr	r3, [r4, #8]
 800428e:	1b9b      	subs	r3, r3, r6
 8004290:	60a3      	str	r3, [r4, #8]
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	4433      	add	r3, r6
 8004296:	6023      	str	r3, [r4, #0]
 8004298:	2000      	movs	r0, #0
 800429a:	e7db      	b.n	8004254 <__ssputs_r+0x58>
 800429c:	462a      	mov	r2, r5
 800429e:	f000 fef9 	bl	8005094 <_realloc_r>
 80042a2:	4606      	mov	r6, r0
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d1e1      	bne.n	800426c <__ssputs_r+0x70>
 80042a8:	6921      	ldr	r1, [r4, #16]
 80042aa:	4650      	mov	r0, sl
 80042ac:	f7ff fd72 	bl	8003d94 <_free_r>
 80042b0:	e7c7      	b.n	8004242 <__ssputs_r+0x46>
	...

080042b4 <_svfiprintf_r>:
 80042b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b8:	4698      	mov	r8, r3
 80042ba:	898b      	ldrh	r3, [r1, #12]
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	b09d      	sub	sp, #116	; 0x74
 80042c0:	4607      	mov	r7, r0
 80042c2:	460d      	mov	r5, r1
 80042c4:	4614      	mov	r4, r2
 80042c6:	d50e      	bpl.n	80042e6 <_svfiprintf_r+0x32>
 80042c8:	690b      	ldr	r3, [r1, #16]
 80042ca:	b963      	cbnz	r3, 80042e6 <_svfiprintf_r+0x32>
 80042cc:	2140      	movs	r1, #64	; 0x40
 80042ce:	f7ff fdcd 	bl	8003e6c <_malloc_r>
 80042d2:	6028      	str	r0, [r5, #0]
 80042d4:	6128      	str	r0, [r5, #16]
 80042d6:	b920      	cbnz	r0, 80042e2 <_svfiprintf_r+0x2e>
 80042d8:	230c      	movs	r3, #12
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	e0d1      	b.n	8004486 <_svfiprintf_r+0x1d2>
 80042e2:	2340      	movs	r3, #64	; 0x40
 80042e4:	616b      	str	r3, [r5, #20]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ea:	2320      	movs	r3, #32
 80042ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042f4:	2330      	movs	r3, #48	; 0x30
 80042f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044a0 <_svfiprintf_r+0x1ec>
 80042fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042fe:	f04f 0901 	mov.w	r9, #1
 8004302:	4623      	mov	r3, r4
 8004304:	469a      	mov	sl, r3
 8004306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800430a:	b10a      	cbz	r2, 8004310 <_svfiprintf_r+0x5c>
 800430c:	2a25      	cmp	r2, #37	; 0x25
 800430e:	d1f9      	bne.n	8004304 <_svfiprintf_r+0x50>
 8004310:	ebba 0b04 	subs.w	fp, sl, r4
 8004314:	d00b      	beq.n	800432e <_svfiprintf_r+0x7a>
 8004316:	465b      	mov	r3, fp
 8004318:	4622      	mov	r2, r4
 800431a:	4629      	mov	r1, r5
 800431c:	4638      	mov	r0, r7
 800431e:	f7ff ff6d 	bl	80041fc <__ssputs_r>
 8004322:	3001      	adds	r0, #1
 8004324:	f000 80aa 	beq.w	800447c <_svfiprintf_r+0x1c8>
 8004328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800432a:	445a      	add	r2, fp
 800432c:	9209      	str	r2, [sp, #36]	; 0x24
 800432e:	f89a 3000 	ldrb.w	r3, [sl]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80a2 	beq.w	800447c <_svfiprintf_r+0x1c8>
 8004338:	2300      	movs	r3, #0
 800433a:	f04f 32ff 	mov.w	r2, #4294967295
 800433e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004342:	f10a 0a01 	add.w	sl, sl, #1
 8004346:	9304      	str	r3, [sp, #16]
 8004348:	9307      	str	r3, [sp, #28]
 800434a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800434e:	931a      	str	r3, [sp, #104]	; 0x68
 8004350:	4654      	mov	r4, sl
 8004352:	2205      	movs	r2, #5
 8004354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004358:	4851      	ldr	r0, [pc, #324]	; (80044a0 <_svfiprintf_r+0x1ec>)
 800435a:	f7fb ff61 	bl	8000220 <memchr>
 800435e:	9a04      	ldr	r2, [sp, #16]
 8004360:	b9d8      	cbnz	r0, 800439a <_svfiprintf_r+0xe6>
 8004362:	06d0      	lsls	r0, r2, #27
 8004364:	bf44      	itt	mi
 8004366:	2320      	movmi	r3, #32
 8004368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436c:	0711      	lsls	r1, r2, #28
 800436e:	bf44      	itt	mi
 8004370:	232b      	movmi	r3, #43	; 0x2b
 8004372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004376:	f89a 3000 	ldrb.w	r3, [sl]
 800437a:	2b2a      	cmp	r3, #42	; 0x2a
 800437c:	d015      	beq.n	80043aa <_svfiprintf_r+0xf6>
 800437e:	9a07      	ldr	r2, [sp, #28]
 8004380:	4654      	mov	r4, sl
 8004382:	2000      	movs	r0, #0
 8004384:	f04f 0c0a 	mov.w	ip, #10
 8004388:	4621      	mov	r1, r4
 800438a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800438e:	3b30      	subs	r3, #48	; 0x30
 8004390:	2b09      	cmp	r3, #9
 8004392:	d94e      	bls.n	8004432 <_svfiprintf_r+0x17e>
 8004394:	b1b0      	cbz	r0, 80043c4 <_svfiprintf_r+0x110>
 8004396:	9207      	str	r2, [sp, #28]
 8004398:	e014      	b.n	80043c4 <_svfiprintf_r+0x110>
 800439a:	eba0 0308 	sub.w	r3, r0, r8
 800439e:	fa09 f303 	lsl.w	r3, r9, r3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	9304      	str	r3, [sp, #16]
 80043a6:	46a2      	mov	sl, r4
 80043a8:	e7d2      	b.n	8004350 <_svfiprintf_r+0x9c>
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	1d19      	adds	r1, r3, #4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	9103      	str	r1, [sp, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfbb      	ittet	lt
 80043b6:	425b      	neglt	r3, r3
 80043b8:	f042 0202 	orrlt.w	r2, r2, #2
 80043bc:	9307      	strge	r3, [sp, #28]
 80043be:	9307      	strlt	r3, [sp, #28]
 80043c0:	bfb8      	it	lt
 80043c2:	9204      	strlt	r2, [sp, #16]
 80043c4:	7823      	ldrb	r3, [r4, #0]
 80043c6:	2b2e      	cmp	r3, #46	; 0x2e
 80043c8:	d10c      	bne.n	80043e4 <_svfiprintf_r+0x130>
 80043ca:	7863      	ldrb	r3, [r4, #1]
 80043cc:	2b2a      	cmp	r3, #42	; 0x2a
 80043ce:	d135      	bne.n	800443c <_svfiprintf_r+0x188>
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	1d1a      	adds	r2, r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	9203      	str	r2, [sp, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bfb8      	it	lt
 80043dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80043e0:	3402      	adds	r4, #2
 80043e2:	9305      	str	r3, [sp, #20]
 80043e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044b0 <_svfiprintf_r+0x1fc>
 80043e8:	7821      	ldrb	r1, [r4, #0]
 80043ea:	2203      	movs	r2, #3
 80043ec:	4650      	mov	r0, sl
 80043ee:	f7fb ff17 	bl	8000220 <memchr>
 80043f2:	b140      	cbz	r0, 8004406 <_svfiprintf_r+0x152>
 80043f4:	2340      	movs	r3, #64	; 0x40
 80043f6:	eba0 000a 	sub.w	r0, r0, sl
 80043fa:	fa03 f000 	lsl.w	r0, r3, r0
 80043fe:	9b04      	ldr	r3, [sp, #16]
 8004400:	4303      	orrs	r3, r0
 8004402:	3401      	adds	r4, #1
 8004404:	9304      	str	r3, [sp, #16]
 8004406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440a:	4826      	ldr	r0, [pc, #152]	; (80044a4 <_svfiprintf_r+0x1f0>)
 800440c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004410:	2206      	movs	r2, #6
 8004412:	f7fb ff05 	bl	8000220 <memchr>
 8004416:	2800      	cmp	r0, #0
 8004418:	d038      	beq.n	800448c <_svfiprintf_r+0x1d8>
 800441a:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <_svfiprintf_r+0x1f4>)
 800441c:	bb1b      	cbnz	r3, 8004466 <_svfiprintf_r+0x1b2>
 800441e:	9b03      	ldr	r3, [sp, #12]
 8004420:	3307      	adds	r3, #7
 8004422:	f023 0307 	bic.w	r3, r3, #7
 8004426:	3308      	adds	r3, #8
 8004428:	9303      	str	r3, [sp, #12]
 800442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442c:	4433      	add	r3, r6
 800442e:	9309      	str	r3, [sp, #36]	; 0x24
 8004430:	e767      	b.n	8004302 <_svfiprintf_r+0x4e>
 8004432:	fb0c 3202 	mla	r2, ip, r2, r3
 8004436:	460c      	mov	r4, r1
 8004438:	2001      	movs	r0, #1
 800443a:	e7a5      	b.n	8004388 <_svfiprintf_r+0xd4>
 800443c:	2300      	movs	r3, #0
 800443e:	3401      	adds	r4, #1
 8004440:	9305      	str	r3, [sp, #20]
 8004442:	4619      	mov	r1, r3
 8004444:	f04f 0c0a 	mov.w	ip, #10
 8004448:	4620      	mov	r0, r4
 800444a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800444e:	3a30      	subs	r2, #48	; 0x30
 8004450:	2a09      	cmp	r2, #9
 8004452:	d903      	bls.n	800445c <_svfiprintf_r+0x1a8>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0c5      	beq.n	80043e4 <_svfiprintf_r+0x130>
 8004458:	9105      	str	r1, [sp, #20]
 800445a:	e7c3      	b.n	80043e4 <_svfiprintf_r+0x130>
 800445c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004460:	4604      	mov	r4, r0
 8004462:	2301      	movs	r3, #1
 8004464:	e7f0      	b.n	8004448 <_svfiprintf_r+0x194>
 8004466:	ab03      	add	r3, sp, #12
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	462a      	mov	r2, r5
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <_svfiprintf_r+0x1f8>)
 800446e:	a904      	add	r1, sp, #16
 8004470:	4638      	mov	r0, r7
 8004472:	f3af 8000 	nop.w
 8004476:	1c42      	adds	r2, r0, #1
 8004478:	4606      	mov	r6, r0
 800447a:	d1d6      	bne.n	800442a <_svfiprintf_r+0x176>
 800447c:	89ab      	ldrh	r3, [r5, #12]
 800447e:	065b      	lsls	r3, r3, #25
 8004480:	f53f af2c 	bmi.w	80042dc <_svfiprintf_r+0x28>
 8004484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004486:	b01d      	add	sp, #116	; 0x74
 8004488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448c:	ab03      	add	r3, sp, #12
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	462a      	mov	r2, r5
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <_svfiprintf_r+0x1f8>)
 8004494:	a904      	add	r1, sp, #16
 8004496:	4638      	mov	r0, r7
 8004498:	f000 f9d4 	bl	8004844 <_printf_i>
 800449c:	e7eb      	b.n	8004476 <_svfiprintf_r+0x1c2>
 800449e:	bf00      	nop
 80044a0:	08005729 	.word	0x08005729
 80044a4:	08005733 	.word	0x08005733
 80044a8:	00000000 	.word	0x00000000
 80044ac:	080041fd 	.word	0x080041fd
 80044b0:	0800572f 	.word	0x0800572f

080044b4 <__sfputc_r>:
 80044b4:	6893      	ldr	r3, [r2, #8]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	b410      	push	{r4}
 80044bc:	6093      	str	r3, [r2, #8]
 80044be:	da08      	bge.n	80044d2 <__sfputc_r+0x1e>
 80044c0:	6994      	ldr	r4, [r2, #24]
 80044c2:	42a3      	cmp	r3, r4
 80044c4:	db01      	blt.n	80044ca <__sfputc_r+0x16>
 80044c6:	290a      	cmp	r1, #10
 80044c8:	d103      	bne.n	80044d2 <__sfputc_r+0x1e>
 80044ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ce:	f000 badf 	b.w	8004a90 <__swbuf_r>
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	1c58      	adds	r0, r3, #1
 80044d6:	6010      	str	r0, [r2, #0]
 80044d8:	7019      	strb	r1, [r3, #0]
 80044da:	4608      	mov	r0, r1
 80044dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <__sfputs_r>:
 80044e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e4:	4606      	mov	r6, r0
 80044e6:	460f      	mov	r7, r1
 80044e8:	4614      	mov	r4, r2
 80044ea:	18d5      	adds	r5, r2, r3
 80044ec:	42ac      	cmp	r4, r5
 80044ee:	d101      	bne.n	80044f4 <__sfputs_r+0x12>
 80044f0:	2000      	movs	r0, #0
 80044f2:	e007      	b.n	8004504 <__sfputs_r+0x22>
 80044f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f8:	463a      	mov	r2, r7
 80044fa:	4630      	mov	r0, r6
 80044fc:	f7ff ffda 	bl	80044b4 <__sfputc_r>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d1f3      	bne.n	80044ec <__sfputs_r+0xa>
 8004504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004508 <_vfiprintf_r>:
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	460d      	mov	r5, r1
 800450e:	b09d      	sub	sp, #116	; 0x74
 8004510:	4614      	mov	r4, r2
 8004512:	4698      	mov	r8, r3
 8004514:	4606      	mov	r6, r0
 8004516:	b118      	cbz	r0, 8004520 <_vfiprintf_r+0x18>
 8004518:	6983      	ldr	r3, [r0, #24]
 800451a:	b90b      	cbnz	r3, 8004520 <_vfiprintf_r+0x18>
 800451c:	f000 fc9a 	bl	8004e54 <__sinit>
 8004520:	4b89      	ldr	r3, [pc, #548]	; (8004748 <_vfiprintf_r+0x240>)
 8004522:	429d      	cmp	r5, r3
 8004524:	d11b      	bne.n	800455e <_vfiprintf_r+0x56>
 8004526:	6875      	ldr	r5, [r6, #4]
 8004528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800452a:	07d9      	lsls	r1, r3, #31
 800452c:	d405      	bmi.n	800453a <_vfiprintf_r+0x32>
 800452e:	89ab      	ldrh	r3, [r5, #12]
 8004530:	059a      	lsls	r2, r3, #22
 8004532:	d402      	bmi.n	800453a <_vfiprintf_r+0x32>
 8004534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004536:	f000 fd2b 	bl	8004f90 <__retarget_lock_acquire_recursive>
 800453a:	89ab      	ldrh	r3, [r5, #12]
 800453c:	071b      	lsls	r3, r3, #28
 800453e:	d501      	bpl.n	8004544 <_vfiprintf_r+0x3c>
 8004540:	692b      	ldr	r3, [r5, #16]
 8004542:	b9eb      	cbnz	r3, 8004580 <_vfiprintf_r+0x78>
 8004544:	4629      	mov	r1, r5
 8004546:	4630      	mov	r0, r6
 8004548:	f000 faf4 	bl	8004b34 <__swsetup_r>
 800454c:	b1c0      	cbz	r0, 8004580 <_vfiprintf_r+0x78>
 800454e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004550:	07dc      	lsls	r4, r3, #31
 8004552:	d50e      	bpl.n	8004572 <_vfiprintf_r+0x6a>
 8004554:	f04f 30ff 	mov.w	r0, #4294967295
 8004558:	b01d      	add	sp, #116	; 0x74
 800455a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455e:	4b7b      	ldr	r3, [pc, #492]	; (800474c <_vfiprintf_r+0x244>)
 8004560:	429d      	cmp	r5, r3
 8004562:	d101      	bne.n	8004568 <_vfiprintf_r+0x60>
 8004564:	68b5      	ldr	r5, [r6, #8]
 8004566:	e7df      	b.n	8004528 <_vfiprintf_r+0x20>
 8004568:	4b79      	ldr	r3, [pc, #484]	; (8004750 <_vfiprintf_r+0x248>)
 800456a:	429d      	cmp	r5, r3
 800456c:	bf08      	it	eq
 800456e:	68f5      	ldreq	r5, [r6, #12]
 8004570:	e7da      	b.n	8004528 <_vfiprintf_r+0x20>
 8004572:	89ab      	ldrh	r3, [r5, #12]
 8004574:	0598      	lsls	r0, r3, #22
 8004576:	d4ed      	bmi.n	8004554 <_vfiprintf_r+0x4c>
 8004578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800457a:	f000 fd0a 	bl	8004f92 <__retarget_lock_release_recursive>
 800457e:	e7e9      	b.n	8004554 <_vfiprintf_r+0x4c>
 8004580:	2300      	movs	r3, #0
 8004582:	9309      	str	r3, [sp, #36]	; 0x24
 8004584:	2320      	movs	r3, #32
 8004586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800458a:	f8cd 800c 	str.w	r8, [sp, #12]
 800458e:	2330      	movs	r3, #48	; 0x30
 8004590:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004754 <_vfiprintf_r+0x24c>
 8004594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004598:	f04f 0901 	mov.w	r9, #1
 800459c:	4623      	mov	r3, r4
 800459e:	469a      	mov	sl, r3
 80045a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045a4:	b10a      	cbz	r2, 80045aa <_vfiprintf_r+0xa2>
 80045a6:	2a25      	cmp	r2, #37	; 0x25
 80045a8:	d1f9      	bne.n	800459e <_vfiprintf_r+0x96>
 80045aa:	ebba 0b04 	subs.w	fp, sl, r4
 80045ae:	d00b      	beq.n	80045c8 <_vfiprintf_r+0xc0>
 80045b0:	465b      	mov	r3, fp
 80045b2:	4622      	mov	r2, r4
 80045b4:	4629      	mov	r1, r5
 80045b6:	4630      	mov	r0, r6
 80045b8:	f7ff ff93 	bl	80044e2 <__sfputs_r>
 80045bc:	3001      	adds	r0, #1
 80045be:	f000 80aa 	beq.w	8004716 <_vfiprintf_r+0x20e>
 80045c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045c4:	445a      	add	r2, fp
 80045c6:	9209      	str	r2, [sp, #36]	; 0x24
 80045c8:	f89a 3000 	ldrb.w	r3, [sl]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a2 	beq.w	8004716 <_vfiprintf_r+0x20e>
 80045d2:	2300      	movs	r3, #0
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045dc:	f10a 0a01 	add.w	sl, sl, #1
 80045e0:	9304      	str	r3, [sp, #16]
 80045e2:	9307      	str	r3, [sp, #28]
 80045e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045e8:	931a      	str	r3, [sp, #104]	; 0x68
 80045ea:	4654      	mov	r4, sl
 80045ec:	2205      	movs	r2, #5
 80045ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f2:	4858      	ldr	r0, [pc, #352]	; (8004754 <_vfiprintf_r+0x24c>)
 80045f4:	f7fb fe14 	bl	8000220 <memchr>
 80045f8:	9a04      	ldr	r2, [sp, #16]
 80045fa:	b9d8      	cbnz	r0, 8004634 <_vfiprintf_r+0x12c>
 80045fc:	06d1      	lsls	r1, r2, #27
 80045fe:	bf44      	itt	mi
 8004600:	2320      	movmi	r3, #32
 8004602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004606:	0713      	lsls	r3, r2, #28
 8004608:	bf44      	itt	mi
 800460a:	232b      	movmi	r3, #43	; 0x2b
 800460c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004610:	f89a 3000 	ldrb.w	r3, [sl]
 8004614:	2b2a      	cmp	r3, #42	; 0x2a
 8004616:	d015      	beq.n	8004644 <_vfiprintf_r+0x13c>
 8004618:	9a07      	ldr	r2, [sp, #28]
 800461a:	4654      	mov	r4, sl
 800461c:	2000      	movs	r0, #0
 800461e:	f04f 0c0a 	mov.w	ip, #10
 8004622:	4621      	mov	r1, r4
 8004624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004628:	3b30      	subs	r3, #48	; 0x30
 800462a:	2b09      	cmp	r3, #9
 800462c:	d94e      	bls.n	80046cc <_vfiprintf_r+0x1c4>
 800462e:	b1b0      	cbz	r0, 800465e <_vfiprintf_r+0x156>
 8004630:	9207      	str	r2, [sp, #28]
 8004632:	e014      	b.n	800465e <_vfiprintf_r+0x156>
 8004634:	eba0 0308 	sub.w	r3, r0, r8
 8004638:	fa09 f303 	lsl.w	r3, r9, r3
 800463c:	4313      	orrs	r3, r2
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	46a2      	mov	sl, r4
 8004642:	e7d2      	b.n	80045ea <_vfiprintf_r+0xe2>
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	1d19      	adds	r1, r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	9103      	str	r1, [sp, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	bfbb      	ittet	lt
 8004650:	425b      	neglt	r3, r3
 8004652:	f042 0202 	orrlt.w	r2, r2, #2
 8004656:	9307      	strge	r3, [sp, #28]
 8004658:	9307      	strlt	r3, [sp, #28]
 800465a:	bfb8      	it	lt
 800465c:	9204      	strlt	r2, [sp, #16]
 800465e:	7823      	ldrb	r3, [r4, #0]
 8004660:	2b2e      	cmp	r3, #46	; 0x2e
 8004662:	d10c      	bne.n	800467e <_vfiprintf_r+0x176>
 8004664:	7863      	ldrb	r3, [r4, #1]
 8004666:	2b2a      	cmp	r3, #42	; 0x2a
 8004668:	d135      	bne.n	80046d6 <_vfiprintf_r+0x1ce>
 800466a:	9b03      	ldr	r3, [sp, #12]
 800466c:	1d1a      	adds	r2, r3, #4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	9203      	str	r2, [sp, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfb8      	it	lt
 8004676:	f04f 33ff 	movlt.w	r3, #4294967295
 800467a:	3402      	adds	r4, #2
 800467c:	9305      	str	r3, [sp, #20]
 800467e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004764 <_vfiprintf_r+0x25c>
 8004682:	7821      	ldrb	r1, [r4, #0]
 8004684:	2203      	movs	r2, #3
 8004686:	4650      	mov	r0, sl
 8004688:	f7fb fdca 	bl	8000220 <memchr>
 800468c:	b140      	cbz	r0, 80046a0 <_vfiprintf_r+0x198>
 800468e:	2340      	movs	r3, #64	; 0x40
 8004690:	eba0 000a 	sub.w	r0, r0, sl
 8004694:	fa03 f000 	lsl.w	r0, r3, r0
 8004698:	9b04      	ldr	r3, [sp, #16]
 800469a:	4303      	orrs	r3, r0
 800469c:	3401      	adds	r4, #1
 800469e:	9304      	str	r3, [sp, #16]
 80046a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a4:	482c      	ldr	r0, [pc, #176]	; (8004758 <_vfiprintf_r+0x250>)
 80046a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046aa:	2206      	movs	r2, #6
 80046ac:	f7fb fdb8 	bl	8000220 <memchr>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d03f      	beq.n	8004734 <_vfiprintf_r+0x22c>
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <_vfiprintf_r+0x254>)
 80046b6:	bb1b      	cbnz	r3, 8004700 <_vfiprintf_r+0x1f8>
 80046b8:	9b03      	ldr	r3, [sp, #12]
 80046ba:	3307      	adds	r3, #7
 80046bc:	f023 0307 	bic.w	r3, r3, #7
 80046c0:	3308      	adds	r3, #8
 80046c2:	9303      	str	r3, [sp, #12]
 80046c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c6:	443b      	add	r3, r7
 80046c8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ca:	e767      	b.n	800459c <_vfiprintf_r+0x94>
 80046cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80046d0:	460c      	mov	r4, r1
 80046d2:	2001      	movs	r0, #1
 80046d4:	e7a5      	b.n	8004622 <_vfiprintf_r+0x11a>
 80046d6:	2300      	movs	r3, #0
 80046d8:	3401      	adds	r4, #1
 80046da:	9305      	str	r3, [sp, #20]
 80046dc:	4619      	mov	r1, r3
 80046de:	f04f 0c0a 	mov.w	ip, #10
 80046e2:	4620      	mov	r0, r4
 80046e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e8:	3a30      	subs	r2, #48	; 0x30
 80046ea:	2a09      	cmp	r2, #9
 80046ec:	d903      	bls.n	80046f6 <_vfiprintf_r+0x1ee>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0c5      	beq.n	800467e <_vfiprintf_r+0x176>
 80046f2:	9105      	str	r1, [sp, #20]
 80046f4:	e7c3      	b.n	800467e <_vfiprintf_r+0x176>
 80046f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80046fa:	4604      	mov	r4, r0
 80046fc:	2301      	movs	r3, #1
 80046fe:	e7f0      	b.n	80046e2 <_vfiprintf_r+0x1da>
 8004700:	ab03      	add	r3, sp, #12
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	462a      	mov	r2, r5
 8004706:	4b16      	ldr	r3, [pc, #88]	; (8004760 <_vfiprintf_r+0x258>)
 8004708:	a904      	add	r1, sp, #16
 800470a:	4630      	mov	r0, r6
 800470c:	f3af 8000 	nop.w
 8004710:	4607      	mov	r7, r0
 8004712:	1c78      	adds	r0, r7, #1
 8004714:	d1d6      	bne.n	80046c4 <_vfiprintf_r+0x1bc>
 8004716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004718:	07d9      	lsls	r1, r3, #31
 800471a:	d405      	bmi.n	8004728 <_vfiprintf_r+0x220>
 800471c:	89ab      	ldrh	r3, [r5, #12]
 800471e:	059a      	lsls	r2, r3, #22
 8004720:	d402      	bmi.n	8004728 <_vfiprintf_r+0x220>
 8004722:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004724:	f000 fc35 	bl	8004f92 <__retarget_lock_release_recursive>
 8004728:	89ab      	ldrh	r3, [r5, #12]
 800472a:	065b      	lsls	r3, r3, #25
 800472c:	f53f af12 	bmi.w	8004554 <_vfiprintf_r+0x4c>
 8004730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004732:	e711      	b.n	8004558 <_vfiprintf_r+0x50>
 8004734:	ab03      	add	r3, sp, #12
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	462a      	mov	r2, r5
 800473a:	4b09      	ldr	r3, [pc, #36]	; (8004760 <_vfiprintf_r+0x258>)
 800473c:	a904      	add	r1, sp, #16
 800473e:	4630      	mov	r0, r6
 8004740:	f000 f880 	bl	8004844 <_printf_i>
 8004744:	e7e4      	b.n	8004710 <_vfiprintf_r+0x208>
 8004746:	bf00      	nop
 8004748:	0800577c 	.word	0x0800577c
 800474c:	0800579c 	.word	0x0800579c
 8004750:	0800575c 	.word	0x0800575c
 8004754:	08005729 	.word	0x08005729
 8004758:	08005733 	.word	0x08005733
 800475c:	00000000 	.word	0x00000000
 8004760:	080044e3 	.word	0x080044e3
 8004764:	0800572f 	.word	0x0800572f

08004768 <_printf_common>:
 8004768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800476c:	4616      	mov	r6, r2
 800476e:	4699      	mov	r9, r3
 8004770:	688a      	ldr	r2, [r1, #8]
 8004772:	690b      	ldr	r3, [r1, #16]
 8004774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004778:	4293      	cmp	r3, r2
 800477a:	bfb8      	it	lt
 800477c:	4613      	movlt	r3, r2
 800477e:	6033      	str	r3, [r6, #0]
 8004780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004784:	4607      	mov	r7, r0
 8004786:	460c      	mov	r4, r1
 8004788:	b10a      	cbz	r2, 800478e <_printf_common+0x26>
 800478a:	3301      	adds	r3, #1
 800478c:	6033      	str	r3, [r6, #0]
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	0699      	lsls	r1, r3, #26
 8004792:	bf42      	ittt	mi
 8004794:	6833      	ldrmi	r3, [r6, #0]
 8004796:	3302      	addmi	r3, #2
 8004798:	6033      	strmi	r3, [r6, #0]
 800479a:	6825      	ldr	r5, [r4, #0]
 800479c:	f015 0506 	ands.w	r5, r5, #6
 80047a0:	d106      	bne.n	80047b0 <_printf_common+0x48>
 80047a2:	f104 0a19 	add.w	sl, r4, #25
 80047a6:	68e3      	ldr	r3, [r4, #12]
 80047a8:	6832      	ldr	r2, [r6, #0]
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	42ab      	cmp	r3, r5
 80047ae:	dc26      	bgt.n	80047fe <_printf_common+0x96>
 80047b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047b4:	1e13      	subs	r3, r2, #0
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	bf18      	it	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	0692      	lsls	r2, r2, #26
 80047be:	d42b      	bmi.n	8004818 <_printf_common+0xb0>
 80047c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047c4:	4649      	mov	r1, r9
 80047c6:	4638      	mov	r0, r7
 80047c8:	47c0      	blx	r8
 80047ca:	3001      	adds	r0, #1
 80047cc:	d01e      	beq.n	800480c <_printf_common+0xa4>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	68e5      	ldr	r5, [r4, #12]
 80047d2:	6832      	ldr	r2, [r6, #0]
 80047d4:	f003 0306 	and.w	r3, r3, #6
 80047d8:	2b04      	cmp	r3, #4
 80047da:	bf08      	it	eq
 80047dc:	1aad      	subeq	r5, r5, r2
 80047de:	68a3      	ldr	r3, [r4, #8]
 80047e0:	6922      	ldr	r2, [r4, #16]
 80047e2:	bf0c      	ite	eq
 80047e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047e8:	2500      	movne	r5, #0
 80047ea:	4293      	cmp	r3, r2
 80047ec:	bfc4      	itt	gt
 80047ee:	1a9b      	subgt	r3, r3, r2
 80047f0:	18ed      	addgt	r5, r5, r3
 80047f2:	2600      	movs	r6, #0
 80047f4:	341a      	adds	r4, #26
 80047f6:	42b5      	cmp	r5, r6
 80047f8:	d11a      	bne.n	8004830 <_printf_common+0xc8>
 80047fa:	2000      	movs	r0, #0
 80047fc:	e008      	b.n	8004810 <_printf_common+0xa8>
 80047fe:	2301      	movs	r3, #1
 8004800:	4652      	mov	r2, sl
 8004802:	4649      	mov	r1, r9
 8004804:	4638      	mov	r0, r7
 8004806:	47c0      	blx	r8
 8004808:	3001      	adds	r0, #1
 800480a:	d103      	bne.n	8004814 <_printf_common+0xac>
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004814:	3501      	adds	r5, #1
 8004816:	e7c6      	b.n	80047a6 <_printf_common+0x3e>
 8004818:	18e1      	adds	r1, r4, r3
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	2030      	movs	r0, #48	; 0x30
 800481e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004822:	4422      	add	r2, r4
 8004824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800482c:	3302      	adds	r3, #2
 800482e:	e7c7      	b.n	80047c0 <_printf_common+0x58>
 8004830:	2301      	movs	r3, #1
 8004832:	4622      	mov	r2, r4
 8004834:	4649      	mov	r1, r9
 8004836:	4638      	mov	r0, r7
 8004838:	47c0      	blx	r8
 800483a:	3001      	adds	r0, #1
 800483c:	d0e6      	beq.n	800480c <_printf_common+0xa4>
 800483e:	3601      	adds	r6, #1
 8004840:	e7d9      	b.n	80047f6 <_printf_common+0x8e>
	...

08004844 <_printf_i>:
 8004844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004848:	7e0f      	ldrb	r7, [r1, #24]
 800484a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800484c:	2f78      	cmp	r7, #120	; 0x78
 800484e:	4691      	mov	r9, r2
 8004850:	4680      	mov	r8, r0
 8004852:	460c      	mov	r4, r1
 8004854:	469a      	mov	sl, r3
 8004856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800485a:	d807      	bhi.n	800486c <_printf_i+0x28>
 800485c:	2f62      	cmp	r7, #98	; 0x62
 800485e:	d80a      	bhi.n	8004876 <_printf_i+0x32>
 8004860:	2f00      	cmp	r7, #0
 8004862:	f000 80d8 	beq.w	8004a16 <_printf_i+0x1d2>
 8004866:	2f58      	cmp	r7, #88	; 0x58
 8004868:	f000 80a3 	beq.w	80049b2 <_printf_i+0x16e>
 800486c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004874:	e03a      	b.n	80048ec <_printf_i+0xa8>
 8004876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800487a:	2b15      	cmp	r3, #21
 800487c:	d8f6      	bhi.n	800486c <_printf_i+0x28>
 800487e:	a101      	add	r1, pc, #4	; (adr r1, 8004884 <_printf_i+0x40>)
 8004880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004884:	080048dd 	.word	0x080048dd
 8004888:	080048f1 	.word	0x080048f1
 800488c:	0800486d 	.word	0x0800486d
 8004890:	0800486d 	.word	0x0800486d
 8004894:	0800486d 	.word	0x0800486d
 8004898:	0800486d 	.word	0x0800486d
 800489c:	080048f1 	.word	0x080048f1
 80048a0:	0800486d 	.word	0x0800486d
 80048a4:	0800486d 	.word	0x0800486d
 80048a8:	0800486d 	.word	0x0800486d
 80048ac:	0800486d 	.word	0x0800486d
 80048b0:	080049fd 	.word	0x080049fd
 80048b4:	08004921 	.word	0x08004921
 80048b8:	080049df 	.word	0x080049df
 80048bc:	0800486d 	.word	0x0800486d
 80048c0:	0800486d 	.word	0x0800486d
 80048c4:	08004a1f 	.word	0x08004a1f
 80048c8:	0800486d 	.word	0x0800486d
 80048cc:	08004921 	.word	0x08004921
 80048d0:	0800486d 	.word	0x0800486d
 80048d4:	0800486d 	.word	0x0800486d
 80048d8:	080049e7 	.word	0x080049e7
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	1d1a      	adds	r2, r3, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	602a      	str	r2, [r5, #0]
 80048e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0a3      	b.n	8004a38 <_printf_i+0x1f4>
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	6829      	ldr	r1, [r5, #0]
 80048f4:	0606      	lsls	r6, r0, #24
 80048f6:	f101 0304 	add.w	r3, r1, #4
 80048fa:	d50a      	bpl.n	8004912 <_printf_i+0xce>
 80048fc:	680e      	ldr	r6, [r1, #0]
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	2e00      	cmp	r6, #0
 8004902:	da03      	bge.n	800490c <_printf_i+0xc8>
 8004904:	232d      	movs	r3, #45	; 0x2d
 8004906:	4276      	negs	r6, r6
 8004908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800490c:	485e      	ldr	r0, [pc, #376]	; (8004a88 <_printf_i+0x244>)
 800490e:	230a      	movs	r3, #10
 8004910:	e019      	b.n	8004946 <_printf_i+0x102>
 8004912:	680e      	ldr	r6, [r1, #0]
 8004914:	602b      	str	r3, [r5, #0]
 8004916:	f010 0f40 	tst.w	r0, #64	; 0x40
 800491a:	bf18      	it	ne
 800491c:	b236      	sxthne	r6, r6
 800491e:	e7ef      	b.n	8004900 <_printf_i+0xbc>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	6820      	ldr	r0, [r4, #0]
 8004924:	1d19      	adds	r1, r3, #4
 8004926:	6029      	str	r1, [r5, #0]
 8004928:	0601      	lsls	r1, r0, #24
 800492a:	d501      	bpl.n	8004930 <_printf_i+0xec>
 800492c:	681e      	ldr	r6, [r3, #0]
 800492e:	e002      	b.n	8004936 <_printf_i+0xf2>
 8004930:	0646      	lsls	r6, r0, #25
 8004932:	d5fb      	bpl.n	800492c <_printf_i+0xe8>
 8004934:	881e      	ldrh	r6, [r3, #0]
 8004936:	4854      	ldr	r0, [pc, #336]	; (8004a88 <_printf_i+0x244>)
 8004938:	2f6f      	cmp	r7, #111	; 0x6f
 800493a:	bf0c      	ite	eq
 800493c:	2308      	moveq	r3, #8
 800493e:	230a      	movne	r3, #10
 8004940:	2100      	movs	r1, #0
 8004942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004946:	6865      	ldr	r5, [r4, #4]
 8004948:	60a5      	str	r5, [r4, #8]
 800494a:	2d00      	cmp	r5, #0
 800494c:	bfa2      	ittt	ge
 800494e:	6821      	ldrge	r1, [r4, #0]
 8004950:	f021 0104 	bicge.w	r1, r1, #4
 8004954:	6021      	strge	r1, [r4, #0]
 8004956:	b90e      	cbnz	r6, 800495c <_printf_i+0x118>
 8004958:	2d00      	cmp	r5, #0
 800495a:	d04d      	beq.n	80049f8 <_printf_i+0x1b4>
 800495c:	4615      	mov	r5, r2
 800495e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004962:	fb03 6711 	mls	r7, r3, r1, r6
 8004966:	5dc7      	ldrb	r7, [r0, r7]
 8004968:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800496c:	4637      	mov	r7, r6
 800496e:	42bb      	cmp	r3, r7
 8004970:	460e      	mov	r6, r1
 8004972:	d9f4      	bls.n	800495e <_printf_i+0x11a>
 8004974:	2b08      	cmp	r3, #8
 8004976:	d10b      	bne.n	8004990 <_printf_i+0x14c>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	07de      	lsls	r6, r3, #31
 800497c:	d508      	bpl.n	8004990 <_printf_i+0x14c>
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	6861      	ldr	r1, [r4, #4]
 8004982:	4299      	cmp	r1, r3
 8004984:	bfde      	ittt	le
 8004986:	2330      	movle	r3, #48	; 0x30
 8004988:	f805 3c01 	strble.w	r3, [r5, #-1]
 800498c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004990:	1b52      	subs	r2, r2, r5
 8004992:	6122      	str	r2, [r4, #16]
 8004994:	f8cd a000 	str.w	sl, [sp]
 8004998:	464b      	mov	r3, r9
 800499a:	aa03      	add	r2, sp, #12
 800499c:	4621      	mov	r1, r4
 800499e:	4640      	mov	r0, r8
 80049a0:	f7ff fee2 	bl	8004768 <_printf_common>
 80049a4:	3001      	adds	r0, #1
 80049a6:	d14c      	bne.n	8004a42 <_printf_i+0x1fe>
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	b004      	add	sp, #16
 80049ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b2:	4835      	ldr	r0, [pc, #212]	; (8004a88 <_printf_i+0x244>)
 80049b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049b8:	6829      	ldr	r1, [r5, #0]
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80049c0:	6029      	str	r1, [r5, #0]
 80049c2:	061d      	lsls	r5, r3, #24
 80049c4:	d514      	bpl.n	80049f0 <_printf_i+0x1ac>
 80049c6:	07df      	lsls	r7, r3, #31
 80049c8:	bf44      	itt	mi
 80049ca:	f043 0320 	orrmi.w	r3, r3, #32
 80049ce:	6023      	strmi	r3, [r4, #0]
 80049d0:	b91e      	cbnz	r6, 80049da <_printf_i+0x196>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f023 0320 	bic.w	r3, r3, #32
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	2310      	movs	r3, #16
 80049dc:	e7b0      	b.n	8004940 <_printf_i+0xfc>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	f043 0320 	orr.w	r3, r3, #32
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	2378      	movs	r3, #120	; 0x78
 80049e8:	4828      	ldr	r0, [pc, #160]	; (8004a8c <_printf_i+0x248>)
 80049ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049ee:	e7e3      	b.n	80049b8 <_printf_i+0x174>
 80049f0:	0659      	lsls	r1, r3, #25
 80049f2:	bf48      	it	mi
 80049f4:	b2b6      	uxthmi	r6, r6
 80049f6:	e7e6      	b.n	80049c6 <_printf_i+0x182>
 80049f8:	4615      	mov	r5, r2
 80049fa:	e7bb      	b.n	8004974 <_printf_i+0x130>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	6826      	ldr	r6, [r4, #0]
 8004a00:	6961      	ldr	r1, [r4, #20]
 8004a02:	1d18      	adds	r0, r3, #4
 8004a04:	6028      	str	r0, [r5, #0]
 8004a06:	0635      	lsls	r5, r6, #24
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	d501      	bpl.n	8004a10 <_printf_i+0x1cc>
 8004a0c:	6019      	str	r1, [r3, #0]
 8004a0e:	e002      	b.n	8004a16 <_printf_i+0x1d2>
 8004a10:	0670      	lsls	r0, r6, #25
 8004a12:	d5fb      	bpl.n	8004a0c <_printf_i+0x1c8>
 8004a14:	8019      	strh	r1, [r3, #0]
 8004a16:	2300      	movs	r3, #0
 8004a18:	6123      	str	r3, [r4, #16]
 8004a1a:	4615      	mov	r5, r2
 8004a1c:	e7ba      	b.n	8004994 <_printf_i+0x150>
 8004a1e:	682b      	ldr	r3, [r5, #0]
 8004a20:	1d1a      	adds	r2, r3, #4
 8004a22:	602a      	str	r2, [r5, #0]
 8004a24:	681d      	ldr	r5, [r3, #0]
 8004a26:	6862      	ldr	r2, [r4, #4]
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f7fb fbf8 	bl	8000220 <memchr>
 8004a30:	b108      	cbz	r0, 8004a36 <_printf_i+0x1f2>
 8004a32:	1b40      	subs	r0, r0, r5
 8004a34:	6060      	str	r0, [r4, #4]
 8004a36:	6863      	ldr	r3, [r4, #4]
 8004a38:	6123      	str	r3, [r4, #16]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a40:	e7a8      	b.n	8004994 <_printf_i+0x150>
 8004a42:	6923      	ldr	r3, [r4, #16]
 8004a44:	462a      	mov	r2, r5
 8004a46:	4649      	mov	r1, r9
 8004a48:	4640      	mov	r0, r8
 8004a4a:	47d0      	blx	sl
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d0ab      	beq.n	80049a8 <_printf_i+0x164>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	079b      	lsls	r3, r3, #30
 8004a54:	d413      	bmi.n	8004a7e <_printf_i+0x23a>
 8004a56:	68e0      	ldr	r0, [r4, #12]
 8004a58:	9b03      	ldr	r3, [sp, #12]
 8004a5a:	4298      	cmp	r0, r3
 8004a5c:	bfb8      	it	lt
 8004a5e:	4618      	movlt	r0, r3
 8004a60:	e7a4      	b.n	80049ac <_printf_i+0x168>
 8004a62:	2301      	movs	r3, #1
 8004a64:	4632      	mov	r2, r6
 8004a66:	4649      	mov	r1, r9
 8004a68:	4640      	mov	r0, r8
 8004a6a:	47d0      	blx	sl
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d09b      	beq.n	80049a8 <_printf_i+0x164>
 8004a70:	3501      	adds	r5, #1
 8004a72:	68e3      	ldr	r3, [r4, #12]
 8004a74:	9903      	ldr	r1, [sp, #12]
 8004a76:	1a5b      	subs	r3, r3, r1
 8004a78:	42ab      	cmp	r3, r5
 8004a7a:	dcf2      	bgt.n	8004a62 <_printf_i+0x21e>
 8004a7c:	e7eb      	b.n	8004a56 <_printf_i+0x212>
 8004a7e:	2500      	movs	r5, #0
 8004a80:	f104 0619 	add.w	r6, r4, #25
 8004a84:	e7f5      	b.n	8004a72 <_printf_i+0x22e>
 8004a86:	bf00      	nop
 8004a88:	0800573a 	.word	0x0800573a
 8004a8c:	0800574b 	.word	0x0800574b

08004a90 <__swbuf_r>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	460e      	mov	r6, r1
 8004a94:	4614      	mov	r4, r2
 8004a96:	4605      	mov	r5, r0
 8004a98:	b118      	cbz	r0, 8004aa2 <__swbuf_r+0x12>
 8004a9a:	6983      	ldr	r3, [r0, #24]
 8004a9c:	b90b      	cbnz	r3, 8004aa2 <__swbuf_r+0x12>
 8004a9e:	f000 f9d9 	bl	8004e54 <__sinit>
 8004aa2:	4b21      	ldr	r3, [pc, #132]	; (8004b28 <__swbuf_r+0x98>)
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	d12b      	bne.n	8004b00 <__swbuf_r+0x70>
 8004aa8:	686c      	ldr	r4, [r5, #4]
 8004aaa:	69a3      	ldr	r3, [r4, #24]
 8004aac:	60a3      	str	r3, [r4, #8]
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	071a      	lsls	r2, r3, #28
 8004ab2:	d52f      	bpl.n	8004b14 <__swbuf_r+0x84>
 8004ab4:	6923      	ldr	r3, [r4, #16]
 8004ab6:	b36b      	cbz	r3, 8004b14 <__swbuf_r+0x84>
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	1ac0      	subs	r0, r0, r3
 8004abe:	6963      	ldr	r3, [r4, #20]
 8004ac0:	b2f6      	uxtb	r6, r6
 8004ac2:	4283      	cmp	r3, r0
 8004ac4:	4637      	mov	r7, r6
 8004ac6:	dc04      	bgt.n	8004ad2 <__swbuf_r+0x42>
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 f92e 	bl	8004d2c <_fflush_r>
 8004ad0:	bb30      	cbnz	r0, 8004b20 <__swbuf_r+0x90>
 8004ad2:	68a3      	ldr	r3, [r4, #8]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60a3      	str	r3, [r4, #8]
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	6022      	str	r2, [r4, #0]
 8004ade:	701e      	strb	r6, [r3, #0]
 8004ae0:	6963      	ldr	r3, [r4, #20]
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	4283      	cmp	r3, r0
 8004ae6:	d004      	beq.n	8004af2 <__swbuf_r+0x62>
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	07db      	lsls	r3, r3, #31
 8004aec:	d506      	bpl.n	8004afc <__swbuf_r+0x6c>
 8004aee:	2e0a      	cmp	r6, #10
 8004af0:	d104      	bne.n	8004afc <__swbuf_r+0x6c>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f919 	bl	8004d2c <_fflush_r>
 8004afa:	b988      	cbnz	r0, 8004b20 <__swbuf_r+0x90>
 8004afc:	4638      	mov	r0, r7
 8004afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <__swbuf_r+0x9c>)
 8004b02:	429c      	cmp	r4, r3
 8004b04:	d101      	bne.n	8004b0a <__swbuf_r+0x7a>
 8004b06:	68ac      	ldr	r4, [r5, #8]
 8004b08:	e7cf      	b.n	8004aaa <__swbuf_r+0x1a>
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <__swbuf_r+0xa0>)
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	bf08      	it	eq
 8004b10:	68ec      	ldreq	r4, [r5, #12]
 8004b12:	e7ca      	b.n	8004aaa <__swbuf_r+0x1a>
 8004b14:	4621      	mov	r1, r4
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 f80c 	bl	8004b34 <__swsetup_r>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d0cb      	beq.n	8004ab8 <__swbuf_r+0x28>
 8004b20:	f04f 37ff 	mov.w	r7, #4294967295
 8004b24:	e7ea      	b.n	8004afc <__swbuf_r+0x6c>
 8004b26:	bf00      	nop
 8004b28:	0800577c 	.word	0x0800577c
 8004b2c:	0800579c 	.word	0x0800579c
 8004b30:	0800575c 	.word	0x0800575c

08004b34 <__swsetup_r>:
 8004b34:	4b32      	ldr	r3, [pc, #200]	; (8004c00 <__swsetup_r+0xcc>)
 8004b36:	b570      	push	{r4, r5, r6, lr}
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	b125      	cbz	r5, 8004b4a <__swsetup_r+0x16>
 8004b40:	69ab      	ldr	r3, [r5, #24]
 8004b42:	b913      	cbnz	r3, 8004b4a <__swsetup_r+0x16>
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 f985 	bl	8004e54 <__sinit>
 8004b4a:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <__swsetup_r+0xd0>)
 8004b4c:	429c      	cmp	r4, r3
 8004b4e:	d10f      	bne.n	8004b70 <__swsetup_r+0x3c>
 8004b50:	686c      	ldr	r4, [r5, #4]
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b58:	0719      	lsls	r1, r3, #28
 8004b5a:	d42c      	bmi.n	8004bb6 <__swsetup_r+0x82>
 8004b5c:	06dd      	lsls	r5, r3, #27
 8004b5e:	d411      	bmi.n	8004b84 <__swsetup_r+0x50>
 8004b60:	2309      	movs	r3, #9
 8004b62:	6033      	str	r3, [r6, #0]
 8004b64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b68:	81a3      	strh	r3, [r4, #12]
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	e03e      	b.n	8004bee <__swsetup_r+0xba>
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <__swsetup_r+0xd4>)
 8004b72:	429c      	cmp	r4, r3
 8004b74:	d101      	bne.n	8004b7a <__swsetup_r+0x46>
 8004b76:	68ac      	ldr	r4, [r5, #8]
 8004b78:	e7eb      	b.n	8004b52 <__swsetup_r+0x1e>
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <__swsetup_r+0xd8>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	bf08      	it	eq
 8004b80:	68ec      	ldreq	r4, [r5, #12]
 8004b82:	e7e6      	b.n	8004b52 <__swsetup_r+0x1e>
 8004b84:	0758      	lsls	r0, r3, #29
 8004b86:	d512      	bpl.n	8004bae <__swsetup_r+0x7a>
 8004b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b8a:	b141      	cbz	r1, 8004b9e <__swsetup_r+0x6a>
 8004b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b90:	4299      	cmp	r1, r3
 8004b92:	d002      	beq.n	8004b9a <__swsetup_r+0x66>
 8004b94:	4630      	mov	r0, r6
 8004b96:	f7ff f8fd 	bl	8003d94 <_free_r>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ba4:	81a3      	strh	r3, [r4, #12]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6063      	str	r3, [r4, #4]
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f043 0308 	orr.w	r3, r3, #8
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	b94b      	cbnz	r3, 8004bce <__swsetup_r+0x9a>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc4:	d003      	beq.n	8004bce <__swsetup_r+0x9a>
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 fa09 	bl	8004fe0 <__smakebuf_r>
 8004bce:	89a0      	ldrh	r0, [r4, #12]
 8004bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bd4:	f010 0301 	ands.w	r3, r0, #1
 8004bd8:	d00a      	beq.n	8004bf0 <__swsetup_r+0xbc>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60a3      	str	r3, [r4, #8]
 8004bde:	6963      	ldr	r3, [r4, #20]
 8004be0:	425b      	negs	r3, r3
 8004be2:	61a3      	str	r3, [r4, #24]
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	b943      	cbnz	r3, 8004bfa <__swsetup_r+0xc6>
 8004be8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bec:	d1ba      	bne.n	8004b64 <__swsetup_r+0x30>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	0781      	lsls	r1, r0, #30
 8004bf2:	bf58      	it	pl
 8004bf4:	6963      	ldrpl	r3, [r4, #20]
 8004bf6:	60a3      	str	r3, [r4, #8]
 8004bf8:	e7f4      	b.n	8004be4 <__swsetup_r+0xb0>
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e7f7      	b.n	8004bee <__swsetup_r+0xba>
 8004bfe:	bf00      	nop
 8004c00:	20000018 	.word	0x20000018
 8004c04:	0800577c 	.word	0x0800577c
 8004c08:	0800579c 	.word	0x0800579c
 8004c0c:	0800575c 	.word	0x0800575c

08004c10 <abort>:
 8004c10:	b508      	push	{r3, lr}
 8004c12:	2006      	movs	r0, #6
 8004c14:	f000 fa96 	bl	8005144 <raise>
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7fc fe09 	bl	8001830 <_exit>
	...

08004c20 <__sflush_r>:
 8004c20:	898a      	ldrh	r2, [r1, #12]
 8004c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c26:	4605      	mov	r5, r0
 8004c28:	0710      	lsls	r0, r2, #28
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	d458      	bmi.n	8004ce0 <__sflush_r+0xc0>
 8004c2e:	684b      	ldr	r3, [r1, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dc05      	bgt.n	8004c40 <__sflush_r+0x20>
 8004c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dc02      	bgt.n	8004c40 <__sflush_r+0x20>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c42:	2e00      	cmp	r6, #0
 8004c44:	d0f9      	beq.n	8004c3a <__sflush_r+0x1a>
 8004c46:	2300      	movs	r3, #0
 8004c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c4c:	682f      	ldr	r7, [r5, #0]
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	d032      	beq.n	8004cb8 <__sflush_r+0x98>
 8004c52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	075a      	lsls	r2, r3, #29
 8004c58:	d505      	bpl.n	8004c66 <__sflush_r+0x46>
 8004c5a:	6863      	ldr	r3, [r4, #4]
 8004c5c:	1ac0      	subs	r0, r0, r3
 8004c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c60:	b10b      	cbz	r3, 8004c66 <__sflush_r+0x46>
 8004c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c64:	1ac0      	subs	r0, r0, r3
 8004c66:	2300      	movs	r3, #0
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c6c:	6a21      	ldr	r1, [r4, #32]
 8004c6e:	4628      	mov	r0, r5
 8004c70:	47b0      	blx	r6
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	d106      	bne.n	8004c86 <__sflush_r+0x66>
 8004c78:	6829      	ldr	r1, [r5, #0]
 8004c7a:	291d      	cmp	r1, #29
 8004c7c:	d82c      	bhi.n	8004cd8 <__sflush_r+0xb8>
 8004c7e:	4a2a      	ldr	r2, [pc, #168]	; (8004d28 <__sflush_r+0x108>)
 8004c80:	40ca      	lsrs	r2, r1
 8004c82:	07d6      	lsls	r6, r2, #31
 8004c84:	d528      	bpl.n	8004cd8 <__sflush_r+0xb8>
 8004c86:	2200      	movs	r2, #0
 8004c88:	6062      	str	r2, [r4, #4]
 8004c8a:	04d9      	lsls	r1, r3, #19
 8004c8c:	6922      	ldr	r2, [r4, #16]
 8004c8e:	6022      	str	r2, [r4, #0]
 8004c90:	d504      	bpl.n	8004c9c <__sflush_r+0x7c>
 8004c92:	1c42      	adds	r2, r0, #1
 8004c94:	d101      	bne.n	8004c9a <__sflush_r+0x7a>
 8004c96:	682b      	ldr	r3, [r5, #0]
 8004c98:	b903      	cbnz	r3, 8004c9c <__sflush_r+0x7c>
 8004c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8004c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c9e:	602f      	str	r7, [r5, #0]
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	d0ca      	beq.n	8004c3a <__sflush_r+0x1a>
 8004ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ca8:	4299      	cmp	r1, r3
 8004caa:	d002      	beq.n	8004cb2 <__sflush_r+0x92>
 8004cac:	4628      	mov	r0, r5
 8004cae:	f7ff f871 	bl	8003d94 <_free_r>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	6360      	str	r0, [r4, #52]	; 0x34
 8004cb6:	e7c1      	b.n	8004c3c <__sflush_r+0x1c>
 8004cb8:	6a21      	ldr	r1, [r4, #32]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b0      	blx	r6
 8004cc0:	1c41      	adds	r1, r0, #1
 8004cc2:	d1c7      	bne.n	8004c54 <__sflush_r+0x34>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0c4      	beq.n	8004c54 <__sflush_r+0x34>
 8004cca:	2b1d      	cmp	r3, #29
 8004ccc:	d001      	beq.n	8004cd2 <__sflush_r+0xb2>
 8004cce:	2b16      	cmp	r3, #22
 8004cd0:	d101      	bne.n	8004cd6 <__sflush_r+0xb6>
 8004cd2:	602f      	str	r7, [r5, #0]
 8004cd4:	e7b1      	b.n	8004c3a <__sflush_r+0x1a>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cdc:	81a3      	strh	r3, [r4, #12]
 8004cde:	e7ad      	b.n	8004c3c <__sflush_r+0x1c>
 8004ce0:	690f      	ldr	r7, [r1, #16]
 8004ce2:	2f00      	cmp	r7, #0
 8004ce4:	d0a9      	beq.n	8004c3a <__sflush_r+0x1a>
 8004ce6:	0793      	lsls	r3, r2, #30
 8004ce8:	680e      	ldr	r6, [r1, #0]
 8004cea:	bf08      	it	eq
 8004cec:	694b      	ldreq	r3, [r1, #20]
 8004cee:	600f      	str	r7, [r1, #0]
 8004cf0:	bf18      	it	ne
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	eba6 0807 	sub.w	r8, r6, r7
 8004cf8:	608b      	str	r3, [r1, #8]
 8004cfa:	f1b8 0f00 	cmp.w	r8, #0
 8004cfe:	dd9c      	ble.n	8004c3a <__sflush_r+0x1a>
 8004d00:	6a21      	ldr	r1, [r4, #32]
 8004d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d04:	4643      	mov	r3, r8
 8004d06:	463a      	mov	r2, r7
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b0      	blx	r6
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	dc06      	bgt.n	8004d1e <__sflush_r+0xfe>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d16:	81a3      	strh	r3, [r4, #12]
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e78e      	b.n	8004c3c <__sflush_r+0x1c>
 8004d1e:	4407      	add	r7, r0
 8004d20:	eba8 0800 	sub.w	r8, r8, r0
 8004d24:	e7e9      	b.n	8004cfa <__sflush_r+0xda>
 8004d26:	bf00      	nop
 8004d28:	20400001 	.word	0x20400001

08004d2c <_fflush_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	690b      	ldr	r3, [r1, #16]
 8004d30:	4605      	mov	r5, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	b913      	cbnz	r3, 8004d3c <_fflush_r+0x10>
 8004d36:	2500      	movs	r5, #0
 8004d38:	4628      	mov	r0, r5
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	b118      	cbz	r0, 8004d46 <_fflush_r+0x1a>
 8004d3e:	6983      	ldr	r3, [r0, #24]
 8004d40:	b90b      	cbnz	r3, 8004d46 <_fflush_r+0x1a>
 8004d42:	f000 f887 	bl	8004e54 <__sinit>
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <_fflush_r+0x6c>)
 8004d48:	429c      	cmp	r4, r3
 8004d4a:	d11b      	bne.n	8004d84 <_fflush_r+0x58>
 8004d4c:	686c      	ldr	r4, [r5, #4]
 8004d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ef      	beq.n	8004d36 <_fflush_r+0xa>
 8004d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d58:	07d0      	lsls	r0, r2, #31
 8004d5a:	d404      	bmi.n	8004d66 <_fflush_r+0x3a>
 8004d5c:	0599      	lsls	r1, r3, #22
 8004d5e:	d402      	bmi.n	8004d66 <_fflush_r+0x3a>
 8004d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d62:	f000 f915 	bl	8004f90 <__retarget_lock_acquire_recursive>
 8004d66:	4628      	mov	r0, r5
 8004d68:	4621      	mov	r1, r4
 8004d6a:	f7ff ff59 	bl	8004c20 <__sflush_r>
 8004d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d70:	07da      	lsls	r2, r3, #31
 8004d72:	4605      	mov	r5, r0
 8004d74:	d4e0      	bmi.n	8004d38 <_fflush_r+0xc>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	059b      	lsls	r3, r3, #22
 8004d7a:	d4dd      	bmi.n	8004d38 <_fflush_r+0xc>
 8004d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d7e:	f000 f908 	bl	8004f92 <__retarget_lock_release_recursive>
 8004d82:	e7d9      	b.n	8004d38 <_fflush_r+0xc>
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <_fflush_r+0x70>)
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d101      	bne.n	8004d8e <_fflush_r+0x62>
 8004d8a:	68ac      	ldr	r4, [r5, #8]
 8004d8c:	e7df      	b.n	8004d4e <_fflush_r+0x22>
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <_fflush_r+0x74>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	bf08      	it	eq
 8004d94:	68ec      	ldreq	r4, [r5, #12]
 8004d96:	e7da      	b.n	8004d4e <_fflush_r+0x22>
 8004d98:	0800577c 	.word	0x0800577c
 8004d9c:	0800579c 	.word	0x0800579c
 8004da0:	0800575c 	.word	0x0800575c

08004da4 <std>:
 8004da4:	2300      	movs	r3, #0
 8004da6:	b510      	push	{r4, lr}
 8004da8:	4604      	mov	r4, r0
 8004daa:	e9c0 3300 	strd	r3, r3, [r0]
 8004dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004db2:	6083      	str	r3, [r0, #8]
 8004db4:	8181      	strh	r1, [r0, #12]
 8004db6:	6643      	str	r3, [r0, #100]	; 0x64
 8004db8:	81c2      	strh	r2, [r0, #14]
 8004dba:	6183      	str	r3, [r0, #24]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	305c      	adds	r0, #92	; 0x5c
 8004dc2:	f7fe ffdf 	bl	8003d84 <memset>
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <std+0x38>)
 8004dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <std+0x3c>)
 8004dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <std+0x40>)
 8004dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <std+0x44>)
 8004dd4:	6224      	str	r4, [r4, #32]
 8004dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	bf00      	nop
 8004ddc:	0800517d 	.word	0x0800517d
 8004de0:	0800519f 	.word	0x0800519f
 8004de4:	080051d7 	.word	0x080051d7
 8004de8:	080051fb 	.word	0x080051fb

08004dec <_cleanup_r>:
 8004dec:	4901      	ldr	r1, [pc, #4]	; (8004df4 <_cleanup_r+0x8>)
 8004dee:	f000 b8af 	b.w	8004f50 <_fwalk_reent>
 8004df2:	bf00      	nop
 8004df4:	08004d2d 	.word	0x08004d2d

08004df8 <__sfmoreglue>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	2268      	movs	r2, #104	; 0x68
 8004dfc:	1e4d      	subs	r5, r1, #1
 8004dfe:	4355      	muls	r5, r2
 8004e00:	460e      	mov	r6, r1
 8004e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e06:	f7ff f831 	bl	8003e6c <_malloc_r>
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	b140      	cbz	r0, 8004e20 <__sfmoreglue+0x28>
 8004e0e:	2100      	movs	r1, #0
 8004e10:	e9c0 1600 	strd	r1, r6, [r0]
 8004e14:	300c      	adds	r0, #12
 8004e16:	60a0      	str	r0, [r4, #8]
 8004e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e1c:	f7fe ffb2 	bl	8003d84 <memset>
 8004e20:	4620      	mov	r0, r4
 8004e22:	bd70      	pop	{r4, r5, r6, pc}

08004e24 <__sfp_lock_acquire>:
 8004e24:	4801      	ldr	r0, [pc, #4]	; (8004e2c <__sfp_lock_acquire+0x8>)
 8004e26:	f000 b8b3 	b.w	8004f90 <__retarget_lock_acquire_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	200000fd 	.word	0x200000fd

08004e30 <__sfp_lock_release>:
 8004e30:	4801      	ldr	r0, [pc, #4]	; (8004e38 <__sfp_lock_release+0x8>)
 8004e32:	f000 b8ae 	b.w	8004f92 <__retarget_lock_release_recursive>
 8004e36:	bf00      	nop
 8004e38:	200000fd 	.word	0x200000fd

08004e3c <__sinit_lock_acquire>:
 8004e3c:	4801      	ldr	r0, [pc, #4]	; (8004e44 <__sinit_lock_acquire+0x8>)
 8004e3e:	f000 b8a7 	b.w	8004f90 <__retarget_lock_acquire_recursive>
 8004e42:	bf00      	nop
 8004e44:	200000fe 	.word	0x200000fe

08004e48 <__sinit_lock_release>:
 8004e48:	4801      	ldr	r0, [pc, #4]	; (8004e50 <__sinit_lock_release+0x8>)
 8004e4a:	f000 b8a2 	b.w	8004f92 <__retarget_lock_release_recursive>
 8004e4e:	bf00      	nop
 8004e50:	200000fe 	.word	0x200000fe

08004e54 <__sinit>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4604      	mov	r4, r0
 8004e58:	f7ff fff0 	bl	8004e3c <__sinit_lock_acquire>
 8004e5c:	69a3      	ldr	r3, [r4, #24]
 8004e5e:	b11b      	cbz	r3, 8004e68 <__sinit+0x14>
 8004e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e64:	f7ff bff0 	b.w	8004e48 <__sinit_lock_release>
 8004e68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e6c:	6523      	str	r3, [r4, #80]	; 0x50
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <__sinit+0x68>)
 8004e70:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <__sinit+0x6c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e76:	42a3      	cmp	r3, r4
 8004e78:	bf04      	itt	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	61a3      	streq	r3, [r4, #24]
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 f820 	bl	8004ec4 <__sfp>
 8004e84:	6060      	str	r0, [r4, #4]
 8004e86:	4620      	mov	r0, r4
 8004e88:	f000 f81c 	bl	8004ec4 <__sfp>
 8004e8c:	60a0      	str	r0, [r4, #8]
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f000 f818 	bl	8004ec4 <__sfp>
 8004e94:	2200      	movs	r2, #0
 8004e96:	60e0      	str	r0, [r4, #12]
 8004e98:	2104      	movs	r1, #4
 8004e9a:	6860      	ldr	r0, [r4, #4]
 8004e9c:	f7ff ff82 	bl	8004da4 <std>
 8004ea0:	68a0      	ldr	r0, [r4, #8]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	2109      	movs	r1, #9
 8004ea6:	f7ff ff7d 	bl	8004da4 <std>
 8004eaa:	68e0      	ldr	r0, [r4, #12]
 8004eac:	2202      	movs	r2, #2
 8004eae:	2112      	movs	r1, #18
 8004eb0:	f7ff ff78 	bl	8004da4 <std>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	61a3      	str	r3, [r4, #24]
 8004eb8:	e7d2      	b.n	8004e60 <__sinit+0xc>
 8004eba:	bf00      	nop
 8004ebc:	08005574 	.word	0x08005574
 8004ec0:	08004ded 	.word	0x08004ded

08004ec4 <__sfp>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	4607      	mov	r7, r0
 8004ec8:	f7ff ffac 	bl	8004e24 <__sfp_lock_acquire>
 8004ecc:	4b1e      	ldr	r3, [pc, #120]	; (8004f48 <__sfp+0x84>)
 8004ece:	681e      	ldr	r6, [r3, #0]
 8004ed0:	69b3      	ldr	r3, [r6, #24]
 8004ed2:	b913      	cbnz	r3, 8004eda <__sfp+0x16>
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f7ff ffbd 	bl	8004e54 <__sinit>
 8004eda:	3648      	adds	r6, #72	; 0x48
 8004edc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	d503      	bpl.n	8004eec <__sfp+0x28>
 8004ee4:	6833      	ldr	r3, [r6, #0]
 8004ee6:	b30b      	cbz	r3, 8004f2c <__sfp+0x68>
 8004ee8:	6836      	ldr	r6, [r6, #0]
 8004eea:	e7f7      	b.n	8004edc <__sfp+0x18>
 8004eec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ef0:	b9d5      	cbnz	r5, 8004f28 <__sfp+0x64>
 8004ef2:	4b16      	ldr	r3, [pc, #88]	; (8004f4c <__sfp+0x88>)
 8004ef4:	60e3      	str	r3, [r4, #12]
 8004ef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004efa:	6665      	str	r5, [r4, #100]	; 0x64
 8004efc:	f000 f847 	bl	8004f8e <__retarget_lock_init_recursive>
 8004f00:	f7ff ff96 	bl	8004e30 <__sfp_lock_release>
 8004f04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f0c:	6025      	str	r5, [r4, #0]
 8004f0e:	61a5      	str	r5, [r4, #24]
 8004f10:	2208      	movs	r2, #8
 8004f12:	4629      	mov	r1, r5
 8004f14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f18:	f7fe ff34 	bl	8003d84 <memset>
 8004f1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f24:	4620      	mov	r0, r4
 8004f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f28:	3468      	adds	r4, #104	; 0x68
 8004f2a:	e7d9      	b.n	8004ee0 <__sfp+0x1c>
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	4638      	mov	r0, r7
 8004f30:	f7ff ff62 	bl	8004df8 <__sfmoreglue>
 8004f34:	4604      	mov	r4, r0
 8004f36:	6030      	str	r0, [r6, #0]
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d1d5      	bne.n	8004ee8 <__sfp+0x24>
 8004f3c:	f7ff ff78 	bl	8004e30 <__sfp_lock_release>
 8004f40:	230c      	movs	r3, #12
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	e7ee      	b.n	8004f24 <__sfp+0x60>
 8004f46:	bf00      	nop
 8004f48:	08005574 	.word	0x08005574
 8004f4c:	ffff0001 	.word	0xffff0001

08004f50 <_fwalk_reent>:
 8004f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f54:	4606      	mov	r6, r0
 8004f56:	4688      	mov	r8, r1
 8004f58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f5c:	2700      	movs	r7, #0
 8004f5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f62:	f1b9 0901 	subs.w	r9, r9, #1
 8004f66:	d505      	bpl.n	8004f74 <_fwalk_reent+0x24>
 8004f68:	6824      	ldr	r4, [r4, #0]
 8004f6a:	2c00      	cmp	r4, #0
 8004f6c:	d1f7      	bne.n	8004f5e <_fwalk_reent+0xe>
 8004f6e:	4638      	mov	r0, r7
 8004f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f74:	89ab      	ldrh	r3, [r5, #12]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d907      	bls.n	8004f8a <_fwalk_reent+0x3a>
 8004f7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	d003      	beq.n	8004f8a <_fwalk_reent+0x3a>
 8004f82:	4629      	mov	r1, r5
 8004f84:	4630      	mov	r0, r6
 8004f86:	47c0      	blx	r8
 8004f88:	4307      	orrs	r7, r0
 8004f8a:	3568      	adds	r5, #104	; 0x68
 8004f8c:	e7e9      	b.n	8004f62 <_fwalk_reent+0x12>

08004f8e <__retarget_lock_init_recursive>:
 8004f8e:	4770      	bx	lr

08004f90 <__retarget_lock_acquire_recursive>:
 8004f90:	4770      	bx	lr

08004f92 <__retarget_lock_release_recursive>:
 8004f92:	4770      	bx	lr

08004f94 <__swhatbuf_r>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	460e      	mov	r6, r1
 8004f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	b096      	sub	sp, #88	; 0x58
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	da08      	bge.n	8004fb8 <__swhatbuf_r+0x24>
 8004fa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	602a      	str	r2, [r5, #0]
 8004fae:	061a      	lsls	r2, r3, #24
 8004fb0:	d410      	bmi.n	8004fd4 <__swhatbuf_r+0x40>
 8004fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fb6:	e00e      	b.n	8004fd6 <__swhatbuf_r+0x42>
 8004fb8:	466a      	mov	r2, sp
 8004fba:	f000 f945 	bl	8005248 <_fstat_r>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	dbf1      	blt.n	8004fa6 <__swhatbuf_r+0x12>
 8004fc2:	9a01      	ldr	r2, [sp, #4]
 8004fc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fcc:	425a      	negs	r2, r3
 8004fce:	415a      	adcs	r2, r3
 8004fd0:	602a      	str	r2, [r5, #0]
 8004fd2:	e7ee      	b.n	8004fb2 <__swhatbuf_r+0x1e>
 8004fd4:	2340      	movs	r3, #64	; 0x40
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	b016      	add	sp, #88	; 0x58
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fe0 <__smakebuf_r>:
 8004fe0:	898b      	ldrh	r3, [r1, #12]
 8004fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fe4:	079d      	lsls	r5, r3, #30
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	460c      	mov	r4, r1
 8004fea:	d507      	bpl.n	8004ffc <__smakebuf_r+0x1c>
 8004fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	6123      	str	r3, [r4, #16]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	6163      	str	r3, [r4, #20]
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	ab01      	add	r3, sp, #4
 8004ffe:	466a      	mov	r2, sp
 8005000:	f7ff ffc8 	bl	8004f94 <__swhatbuf_r>
 8005004:	9900      	ldr	r1, [sp, #0]
 8005006:	4605      	mov	r5, r0
 8005008:	4630      	mov	r0, r6
 800500a:	f7fe ff2f 	bl	8003e6c <_malloc_r>
 800500e:	b948      	cbnz	r0, 8005024 <__smakebuf_r+0x44>
 8005010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005014:	059a      	lsls	r2, r3, #22
 8005016:	d4ef      	bmi.n	8004ff8 <__smakebuf_r+0x18>
 8005018:	f023 0303 	bic.w	r3, r3, #3
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	e7e3      	b.n	8004fec <__smakebuf_r+0xc>
 8005024:	4b0d      	ldr	r3, [pc, #52]	; (800505c <__smakebuf_r+0x7c>)
 8005026:	62b3      	str	r3, [r6, #40]	; 0x28
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	6020      	str	r0, [r4, #0]
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	81a3      	strh	r3, [r4, #12]
 8005032:	9b00      	ldr	r3, [sp, #0]
 8005034:	6163      	str	r3, [r4, #20]
 8005036:	9b01      	ldr	r3, [sp, #4]
 8005038:	6120      	str	r0, [r4, #16]
 800503a:	b15b      	cbz	r3, 8005054 <__smakebuf_r+0x74>
 800503c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005040:	4630      	mov	r0, r6
 8005042:	f000 f913 	bl	800526c <_isatty_r>
 8005046:	b128      	cbz	r0, 8005054 <__smakebuf_r+0x74>
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	89a0      	ldrh	r0, [r4, #12]
 8005056:	4305      	orrs	r5, r0
 8005058:	81a5      	strh	r5, [r4, #12]
 800505a:	e7cd      	b.n	8004ff8 <__smakebuf_r+0x18>
 800505c:	08004ded 	.word	0x08004ded

08005060 <memmove>:
 8005060:	4288      	cmp	r0, r1
 8005062:	b510      	push	{r4, lr}
 8005064:	eb01 0402 	add.w	r4, r1, r2
 8005068:	d902      	bls.n	8005070 <memmove+0x10>
 800506a:	4284      	cmp	r4, r0
 800506c:	4623      	mov	r3, r4
 800506e:	d807      	bhi.n	8005080 <memmove+0x20>
 8005070:	1e43      	subs	r3, r0, #1
 8005072:	42a1      	cmp	r1, r4
 8005074:	d008      	beq.n	8005088 <memmove+0x28>
 8005076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507e:	e7f8      	b.n	8005072 <memmove+0x12>
 8005080:	4402      	add	r2, r0
 8005082:	4601      	mov	r1, r0
 8005084:	428a      	cmp	r2, r1
 8005086:	d100      	bne.n	800508a <memmove+0x2a>
 8005088:	bd10      	pop	{r4, pc}
 800508a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005092:	e7f7      	b.n	8005084 <memmove+0x24>

08005094 <_realloc_r>:
 8005094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005098:	4680      	mov	r8, r0
 800509a:	4614      	mov	r4, r2
 800509c:	460e      	mov	r6, r1
 800509e:	b921      	cbnz	r1, 80050aa <_realloc_r+0x16>
 80050a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050a4:	4611      	mov	r1, r2
 80050a6:	f7fe bee1 	b.w	8003e6c <_malloc_r>
 80050aa:	b92a      	cbnz	r2, 80050b8 <_realloc_r+0x24>
 80050ac:	f7fe fe72 	bl	8003d94 <_free_r>
 80050b0:	4625      	mov	r5, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b8:	f000 f8fa 	bl	80052b0 <_malloc_usable_size_r>
 80050bc:	4284      	cmp	r4, r0
 80050be:	4607      	mov	r7, r0
 80050c0:	d802      	bhi.n	80050c8 <_realloc_r+0x34>
 80050c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050c6:	d812      	bhi.n	80050ee <_realloc_r+0x5a>
 80050c8:	4621      	mov	r1, r4
 80050ca:	4640      	mov	r0, r8
 80050cc:	f7fe fece 	bl	8003e6c <_malloc_r>
 80050d0:	4605      	mov	r5, r0
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d0ed      	beq.n	80050b2 <_realloc_r+0x1e>
 80050d6:	42bc      	cmp	r4, r7
 80050d8:	4622      	mov	r2, r4
 80050da:	4631      	mov	r1, r6
 80050dc:	bf28      	it	cs
 80050de:	463a      	movcs	r2, r7
 80050e0:	f7fe fe42 	bl	8003d68 <memcpy>
 80050e4:	4631      	mov	r1, r6
 80050e6:	4640      	mov	r0, r8
 80050e8:	f7fe fe54 	bl	8003d94 <_free_r>
 80050ec:	e7e1      	b.n	80050b2 <_realloc_r+0x1e>
 80050ee:	4635      	mov	r5, r6
 80050f0:	e7df      	b.n	80050b2 <_realloc_r+0x1e>

080050f2 <_raise_r>:
 80050f2:	291f      	cmp	r1, #31
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4604      	mov	r4, r0
 80050f8:	460d      	mov	r5, r1
 80050fa:	d904      	bls.n	8005106 <_raise_r+0x14>
 80050fc:	2316      	movs	r3, #22
 80050fe:	6003      	str	r3, [r0, #0]
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	bd38      	pop	{r3, r4, r5, pc}
 8005106:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005108:	b112      	cbz	r2, 8005110 <_raise_r+0x1e>
 800510a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800510e:	b94b      	cbnz	r3, 8005124 <_raise_r+0x32>
 8005110:	4620      	mov	r0, r4
 8005112:	f000 f831 	bl	8005178 <_getpid_r>
 8005116:	462a      	mov	r2, r5
 8005118:	4601      	mov	r1, r0
 800511a:	4620      	mov	r0, r4
 800511c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005120:	f000 b818 	b.w	8005154 <_kill_r>
 8005124:	2b01      	cmp	r3, #1
 8005126:	d00a      	beq.n	800513e <_raise_r+0x4c>
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	d103      	bne.n	8005134 <_raise_r+0x42>
 800512c:	2316      	movs	r3, #22
 800512e:	6003      	str	r3, [r0, #0]
 8005130:	2001      	movs	r0, #1
 8005132:	e7e7      	b.n	8005104 <_raise_r+0x12>
 8005134:	2400      	movs	r4, #0
 8005136:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800513a:	4628      	mov	r0, r5
 800513c:	4798      	blx	r3
 800513e:	2000      	movs	r0, #0
 8005140:	e7e0      	b.n	8005104 <_raise_r+0x12>
	...

08005144 <raise>:
 8005144:	4b02      	ldr	r3, [pc, #8]	; (8005150 <raise+0xc>)
 8005146:	4601      	mov	r1, r0
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	f7ff bfd2 	b.w	80050f2 <_raise_r>
 800514e:	bf00      	nop
 8005150:	20000018 	.word	0x20000018

08005154 <_kill_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4d07      	ldr	r5, [pc, #28]	; (8005174 <_kill_r+0x20>)
 8005158:	2300      	movs	r3, #0
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	f7fc fb55 	bl	8001810 <_kill>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d102      	bne.n	8005170 <_kill_r+0x1c>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	b103      	cbz	r3, 8005170 <_kill_r+0x1c>
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	200000f8 	.word	0x200000f8

08005178 <_getpid_r>:
 8005178:	f7fc bb42 	b.w	8001800 <_getpid>

0800517c <__sread>:
 800517c:	b510      	push	{r4, lr}
 800517e:	460c      	mov	r4, r1
 8005180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005184:	f000 f89c 	bl	80052c0 <_read_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	bfab      	itete	ge
 800518c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800518e:	89a3      	ldrhlt	r3, [r4, #12]
 8005190:	181b      	addge	r3, r3, r0
 8005192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005196:	bfac      	ite	ge
 8005198:	6563      	strge	r3, [r4, #84]	; 0x54
 800519a:	81a3      	strhlt	r3, [r4, #12]
 800519c:	bd10      	pop	{r4, pc}

0800519e <__swrite>:
 800519e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a2:	461f      	mov	r7, r3
 80051a4:	898b      	ldrh	r3, [r1, #12]
 80051a6:	05db      	lsls	r3, r3, #23
 80051a8:	4605      	mov	r5, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	4616      	mov	r6, r2
 80051ae:	d505      	bpl.n	80051bc <__swrite+0x1e>
 80051b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b4:	2302      	movs	r3, #2
 80051b6:	2200      	movs	r2, #0
 80051b8:	f000 f868 	bl	800528c <_lseek_r>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	4632      	mov	r2, r6
 80051ca:	463b      	mov	r3, r7
 80051cc:	4628      	mov	r0, r5
 80051ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051d2:	f000 b817 	b.w	8005204 <_write_r>

080051d6 <__sseek>:
 80051d6:	b510      	push	{r4, lr}
 80051d8:	460c      	mov	r4, r1
 80051da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051de:	f000 f855 	bl	800528c <_lseek_r>
 80051e2:	1c43      	adds	r3, r0, #1
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	bf15      	itete	ne
 80051e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80051ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051f2:	81a3      	strheq	r3, [r4, #12]
 80051f4:	bf18      	it	ne
 80051f6:	81a3      	strhne	r3, [r4, #12]
 80051f8:	bd10      	pop	{r4, pc}

080051fa <__sclose>:
 80051fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fe:	f000 b813 	b.w	8005228 <_close_r>
	...

08005204 <_write_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d07      	ldr	r5, [pc, #28]	; (8005224 <_write_r+0x20>)
 8005208:	4604      	mov	r4, r0
 800520a:	4608      	mov	r0, r1
 800520c:	4611      	mov	r1, r2
 800520e:	2200      	movs	r2, #0
 8005210:	602a      	str	r2, [r5, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	f7fc fb33 	bl	800187e <_write>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_write_r+0x1e>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_write_r+0x1e>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	200000f8 	.word	0x200000f8

08005228 <_close_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d06      	ldr	r5, [pc, #24]	; (8005244 <_close_r+0x1c>)
 800522c:	2300      	movs	r3, #0
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	f7fc fb3f 	bl	80018b6 <_close>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_close_r+0x1a>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_close_r+0x1a>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	200000f8 	.word	0x200000f8

08005248 <_fstat_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d07      	ldr	r5, [pc, #28]	; (8005268 <_fstat_r+0x20>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	602b      	str	r3, [r5, #0]
 8005256:	f7fc fb3a 	bl	80018ce <_fstat>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d102      	bne.n	8005264 <_fstat_r+0x1c>
 800525e:	682b      	ldr	r3, [r5, #0]
 8005260:	b103      	cbz	r3, 8005264 <_fstat_r+0x1c>
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	bf00      	nop
 8005268:	200000f8 	.word	0x200000f8

0800526c <_isatty_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d06      	ldr	r5, [pc, #24]	; (8005288 <_isatty_r+0x1c>)
 8005270:	2300      	movs	r3, #0
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fc fb39 	bl	80018ee <_isatty>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_isatty_r+0x1a>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_isatty_r+0x1a>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200000f8 	.word	0x200000f8

0800528c <_lseek_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d07      	ldr	r5, [pc, #28]	; (80052ac <_lseek_r+0x20>)
 8005290:	4604      	mov	r4, r0
 8005292:	4608      	mov	r0, r1
 8005294:	4611      	mov	r1, r2
 8005296:	2200      	movs	r2, #0
 8005298:	602a      	str	r2, [r5, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	f7fc fb32 	bl	8001904 <_lseek>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_lseek_r+0x1e>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_lseek_r+0x1e>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	200000f8 	.word	0x200000f8

080052b0 <_malloc_usable_size_r>:
 80052b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b4:	1f18      	subs	r0, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfbc      	itt	lt
 80052ba:	580b      	ldrlt	r3, [r1, r0]
 80052bc:	18c0      	addlt	r0, r0, r3
 80052be:	4770      	bx	lr

080052c0 <_read_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4d07      	ldr	r5, [pc, #28]	; (80052e0 <_read_r+0x20>)
 80052c4:	4604      	mov	r4, r0
 80052c6:	4608      	mov	r0, r1
 80052c8:	4611      	mov	r1, r2
 80052ca:	2200      	movs	r2, #0
 80052cc:	602a      	str	r2, [r5, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f7fc fab8 	bl	8001844 <_read>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_read_r+0x1e>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_read_r+0x1e>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	200000f8 	.word	0x200000f8

080052e4 <_init>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr

080052f0 <_fini>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr
